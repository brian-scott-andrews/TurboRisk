{
Program:
Tectonic
Author:
Torkani
Description:
Hybrid of Plates and Basic
History:

}

program New;

// Buffers
// 401 - See what strategy we are using
//    0 - Moving around in one territory
//    1 - fighting normally
//    2 - eliminating a player
// 402 - See which (if any) player we are eliminating
// 450 - To see how many attacks we have made this turn
// 451 - Manual override for occupation

// ---------- Making a hybrid of this bot ------------

// Firstly, the bot must not use buffers 400-500, if it does then these buffers
// may have to be changed to something else.

// First copy out any functions or procedures of the bot into the top part of
// the bot labbelled below the instructions.

// Then copy the assignment routine of the bot into the
// Assignment routine of plates. Then copy the
// placement, attack, occupation and fortification routines of the hybrid into
// the Conventional_Warfare_Placement(), Conventional_Warfare_Attack(),
// Conventional_Warfare_Occupation() and Conventional_Warfare_Fortification()
// procedures.


// Copy out functions and procedures here

// End of copying out functions and procedures

function get_territory_biggest_army(): integer;
var
  i: integer;
  highest_army: integer;
  highest_territory: integer;
begin

  highest_territory:=0;
  highest_army:=1;

  for i:=1 to 42 do begin
    if TIsMine(i) then begin
      if TArmies(i)>highest_army then begin
        highest_army:=TArmies(i);
        highest_territory:=i;
      end;
    end;
  end;

  result:=highest_territory;

end;

function get_territory_most_fronts(): integer;
var
  i: integer;
  highest_fronts: integer;
  highest_territory: integer;
begin

  highest_territory:=0;
  highest_fronts:=0;

  for i:=1 to 42 do begin
    if TIsMine(i) then begin
      if TFrontsCount(i)>highest_fronts then begin
        highest_fronts:=TFrontsCount(i);
        highest_territory:=i;
      end;
    end;
  end;

  result:=highest_territory;

end;

function get_weakest_path_to_enemy(from_territory, player: integer; var P_strength, F_ter, L_ter: integer): integer;
var
  i: integer;
  path_strength: integer;
  lowest_strength: integer;
  first_proposed_ter: integer;
  // The returned one
  first_path_ter: integer;
  last_path_ter: integer;
  number_of_ter: integer;
  enemy_armies: integer;
begin
  lowest_strength:=10000;
  for i:=1 to 42 do begin
    if TOwner(i)=player then begin
      TWeakestPath(from_territory, i, first_proposed_ter, number_of_ter, enemy_armies)
      path_strength:=number_of_ter+enemy_armies;

      if path_strength<lowest_strength then begin
        lowest_strength:=path_strength;
        first_path_ter:=first_proposed_ter
        last_path_ter:=i
      end;
    end;
  end;

  P_strength:=lowest_strength;
  F_ter:=first_path_ter;
  L_ter:=last_path_ter;

  // If get_weakest_path_to_enemy fails or from territory is surrounded by
  // friendly territories

  if (P_strength=10000) and (F_ter=0) and (L_ter=0) then begin
    result:=0;
  end else begin
    result:=1
  end;

end;

function get_num_player_borders(territory, player: integer): integer;
// Does not include the current territory it is in.
var
  i: integer;
  border_ter: integer;
  num_player_borders: integer;
begin

  num_player_borders:=0

  for i:=1 to TBordersCount(territory) do begin
    border_ter:=TBorder(territory, i);

    if TOwner(border_ter)=player then begin
      num_player_borders:=num_player_borders+1
    end;

  end;

  result:=num_player_borders

end;

function get_est_no_armies_conquer_player(start_ter, player: integer): integer;
// Player must have all the territories bordering each other, this function will
// not check that
// Only an estimate, no completely accurate
var
  current_ter: integer;
  current_path_strength: integer;
  strength: integer;
  first_territory: integer;
  last_territory: integer;
begin

  current_ter:=start_ter
  strength:=0;

  get_weakest_path_to_enemy(current_ter, player, current_path_strength, first_territory, last_territory);
  strength:=strength+current_path_strength;
  // Take away the stregnth of the last territory
  strength:=strength-(TArmies(last_territory)+1);
  strength:=strength+PArmiesCount(player)+PTerritoriesCount(player);

  if (strength>10000) and (first_territory=0) then begin
    result:=0;
  end else begin
    result:=strength;
  end;
end;

function get_total_num_armies(): integer;
var
  p: integer;
  total_num_armies: integer;
begin
  total_num_armies:=0;

  for p:=1 to SPlayersCount() do begin
    total_num_armies:=total_num_armies+PArmiesCount(p);
  end;

  result:=total_num_armies

end;

procedure Conventional_Warfare_Placement(var ToTerritory: integer);
var
  enemy_territory: integer;
  enemy_armies: integer;
  lowest_enemy_armies: integer;
  i: integer;
begin
  lowest_enemy_armies:=10000;

  // Go through all the territories and see which one is easiest to use for an
  // invasion of enemy territory
  for i:=1 to 42 do begin
    if TOwner(i)=PMe() then begin
      if TIsFront(i) then begin
        TWeakestFront(i, enemy_territory, enemy_armies);
        // Set the lowest enemy armies and the territory for deploy variable
        if enemy_armies<lowest_enemy_armies then begin
          // Don't reinforce if we already have a 2 to 1 ratio of attacking to
          // defending troops plus one extra troop (to leave behind) and 1
          // troops extra (for beginning).
          if (TArmies(i)-1)<=(TArmies(enemy_territory)*2)+1 then begin
            lowest_enemy_armies:=enemy_armies;
            ToTerritory:=i;
          end;
        end;
      end;
    end;
  end;

  lowest_enemy_armies:=10000;

  // If no best territory is chosen then choose the territory with the
  // weakest front
  if ToTerritory=0 then begin
    // Same code as last time, just that no limit on the max ratio of our
    // troops to enemy troops
    for i:=1 to 42 do begin
      if TOwner(i)=PMe() then begin
        if TIsFront(i) then begin
          TWeakestFront(i, enemy_territory, enemy_armies);
          // Set the lowest enemy armies and the territory for deploy variable
          if enemy_armies<lowest_enemy_armies then begin
            lowest_enemy_armies:=enemy_armies;
            ToTerritory:=i;
          end;
        end;
      end;
    end;

  end;

end;

procedure Conventional_Warfare_Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
var
  enemy_territory: integer;
  enemy_armies: integer;
begin

  // If attacking and defending territories are both fronts, leave as many
  // armies in the attacking territories as troops on it's strongest front
  if TIsFront(FromTerritory) then begin
    if TIsFront(ToTerritory) then begin
      TStrongestFront(FromTerritory, enemy_territory, enemy_armies)

      if TArmies(FromTerritory)-enemy_armies<0 then begin
      // Do nothing
      end
      else Armies:=TArmies(FromTerritory)-enemy_armies;
    end;
  end;

  // If attacking territory is front, but defending territory is not
  // then do not do anything
  if TIsFront(FromTerritory) then begin
    if not TIsFront(ToTerritory) then begin
    // Do nothing
    end;
  end;

  // If the defending territory is front but the attacking territory is not
  // then move all the armies into the attacking territory
  if not TIsFront(FromTerritory) then begin
    if TIsFront(ToTerritory) then begin
      Armies:=TArmies(FromTerritory)-1;
    end;
  end;

  // If, after the conquest, neither territories are fronts, then move all the
  // units into the defending territory
  if not TIsFront(FromTerritory) then begin
    if not TIsFront(ToTerritory) then begin
      Armies:=TArmies(FromTerritory)-1;
    end;
  end;

end;

procedure Conventional_Warfare_Fortification(var FromTerritory, ToTerritory, Armies: integer);
var
  i: integer;
  // Most troops not on front
  most_troops_nof: integer;
  // Territory most troops not on front
  ter_most_troops_nof: integer;
begin
  most_troops_nof:=1;
  ter_most_troops_nof:=0;
  UMessageOn()

  // Find all behind front territories that do not have 1 army
  for i:=1 to 42 do begin
    if TOwner(i)=PMe() then begin
      if not TIsFront(i) then begin

        // If this territory has more troops than any other territory that is
        // not on front
        if TArmies(i)>most_troops_nof then begin
          most_troops_nof:=TArmies(i);
          ter_most_troops_nof:=i;
        end;

      end;
    end;
  end;

  if ter_most_troops_nof>0 then begin
    FromTerritory:=ter_most_troops_nof;
    ToTerritory:=TPathToFront(ter_most_troops_nof);
    Armies:=TArmies(ter_most_troops_nof)-1;
  end;

end;

procedure Conventional_Warfare_Attack(var FromTerritory, ToTerritory: integer);
var
  enemy_territory: integer;
  enemy_armies: integer;
  current_ratio: integer;
  highest_ratio: integer;
  i: integer;
begin

  highest_ratio:=0
  current_ratio:=0

  // For every territory check whether it is a feasible candidate for attacking
  // and choose which one is the best
  // repeat this until all good candidates for attacking have been finished
  for i:=1 to 42 do begin
    if TOwner(i)=PMe() then begin
      if TIsFront(i) then begin
        TWeakestFront(i, enemy_territory, enemy_armies);

        if (TArmies(i)-1)>(TArmies(enemy_territory)*1.5) then begin
          current_ratio:=(TArmies(i)-1)/enemy_armies
          if current_ratio>highest_ratio then begin
            FromTerritory:=i;
            ToTerritory:=enemy_territory;
            highest_ratio:=current_ratio;
          end;

        end;
      end;
    end;
  end;

end;

procedure Migration_Attack(var FromTerritory, ToTerritory: integer);
var
  cur_ter: integer;
  enemy_ter: integer;
  enemy_armies: integer;
  dont_attack_turn: integer;
  i: integer;
  attack_modifier: double;
begin

  cur_ter:=get_territory_biggest_army();
  dont_attack_turn:=0

  if SConquest then begin

    attack_modifier:=5
    // Exponentially increase the attack modifier
    if UBufferGet(450)>0 then begin
      for i:=1 to trunc(UBufferGet(450)) do begin
        attack_modifier:=attack_modifier*attack_modifier*(attack_modifier/2);
      end;
    end;

  end else begin
    attack_modifier:=0;
  end;

  // Attack did not fail last time
  if cur_ter>0 then begin
    if TFrontsCount(cur_ter)>0 then begin
      TWeakestFront(cur_ter, enemy_ter, enemy_armies);
    end else begin
      dont_attack_turn:=1
    end;
  end;

  // If number of armies is 4 times the number of enemy armies (including
  // one left behind and attack modifier) then attack
  if ((TArmies(cur_ter)-1)/(2+attack_modifier)>enemy_armies)
  and (dont_attack_turn=0) then begin
    // Attack
    FromTerritory:=cur_ter;
    ToTerritory:=enemy_ter;
  end;

end;

procedure Eliminate_Player_Attack(target_player: integer; var FromTerritory, ToTerritory: integer);
var
  staging_ter: integer;
  territory_bordering: integer;
  strength: integer;
  first_territory: integer;
  last_territory: integer;

begin
  staging_ter:=get_territory_biggest_army();
  territory_bordering:=0;

  if staging_ter=0 then begin
    FromTerritory:=0;
    ToTerritory:=0;
    UBufferSet(401,0);
    UBufferSet(402,0);
  end;

  if staging_ter>0 then begin
    get_weakest_path_to_enemy(staging_ter, target_player, strength, first_territory, last_territory);

    // No weakest path to enemy
    if (first_territory=0) and (last_territory=0) then begin
      FromTerritory:=0;
      ToTerritory:=0;

      // Stop the elimination of the player
      UBufferSet(401,0);
      UBufferSet(402,0);

    end else begin
      FromTerritory:=staging_ter;
      ToTerritory:=first_territory;
    end;

  end;

  // Check if we will be in a dead end after this attack
  if (FromTerritory>0) and (ToTerritory>0) then begin
    if get_num_player_borders( ToTerritory, PMe() )=TBordersCount(ToTerritory) then begin
      // Set the occupation buffer not to put in any armies
      UBufferSet(451, -1);
    end;
  end;

end;



procedure Assignment(var ToTerritory: integer);
var
  i: integer;
begin

  // Choose the first territory available by id number
  ToTerritory:=0

  for i:=1 to 42 do begin
    if TOwner(i)=0 then begin
      ToTerritory:=i;
      break;
    end;
  end;

end;

procedure Placement(var ToTerritory: integer);
var
  biggest_army_ter: integer;
  most_fronts: integer;
begin

  biggest_army_ter:=get_territory_biggest_army();
  most_fronts:=get_territory_most_fronts();

  if (UBufferGet(401)=0) or (UBufferGet(401)=2) then begin

    if biggest_army_ter=0 then begin
      ToTerritory:=most_fronts;
    end else begin
      ToTerritory:=biggest_army_ter;
    end;

  end else if UBufferGet(401)=1 then begin
    Conventional_Warfare_Placement(ToTerritory);
  end;

end;

procedure Attack(var FromTerritory, ToTerritory: integer);
var

  cur_ter: integer;
  cur_ter_armies: integer;

  p: integer;
  // Number of the player we want to eliminate, otherwise 0.
  program_to_eliminate: string;
  eliminate: integer;

  total_num_my_armies: integer;
  total_enemy_armies: integer;
  average_enemy_armies: integer;

  total_p_armies: integer;
  total_not_p_armies: integer;
  average_not_p_armies: integer;

  average_num_ter: integer;

begin
  cur_ter:=get_territory_biggest_army();
  cur_ter_armies:=TArmies(cur_ter);
  eliminate:=trunc(UBufferGet(402));
  total_num_my_armies:=PArmiesCount(PMe());
  total_enemy_armies:=get_total_num_armies()-total_num_my_armies;
  // Average armies does not include plates
  average_enemy_armies:=total_enemy_armies/(SAlivePlayersCount()-1);

  average_num_ter:=( 42/SAlivePlayersCount() )

  // If the player we want to elimante has been eliminated go back to migrating around the map
  if (PTerritoriesCount(eliminate)=0) and (eliminate>0) then begin
    UBufferSet(401,0);
    UBufferSet(402,0);
  end;

  // Set the elimination buffer to 0 if we are using conventional warfare
  if (UBufferGet(401)=1) and (UBufferGet(402)>0) then begin
    UBufferSet(402,0);
  end;

    // See if we should switch to conventional warfare
  if (total_num_my_armies>(average_enemy_armies*3)) and (total_num_my_armies>80) then begin
    if not (UBufferGet(401)=1) then begin
      // Set the strategy buffer to conventional warfare
      UBufferSet(401,1);
    end;
  end;

  // If one player is destroying all the other players then switch to conventional warfare
  if (total_num_my_armies>(average_enemy_armies*1.25)) and (total_num_my_armies>80) then begin
    if not (UBufferGet(401)=1) then begin
      // Stop a division by zero later
      if SAlivePlayersCount()>2 then begin

        for p:=1 to SPlayersCount() do begin
          if (p<>PMe()) and (PTerritoriesCount(p)>0) then begin
            total_p_armies:=PArmiesCount(p);

            // The average armies and total not player armies does not include plates
            total_not_p_armies:=get_total_num_armies()-(total_p_armies+total_num_my_armies);
            average_not_p_armies:=total_not_p_armies/(SAlivePlayersCount()-2);

            if total_p_armies>(average_not_p_armies*1.5) then begin
              if PTerritoriesCount(p)>(average_not_p_armies*3) then begin
                // Set the strategy buffer to conventional warfare
                UBufferSet(401,1);
                // Break from the loop
                p:=11;
              end;
            end;

          end;
        end;

      end;
    end;
  end;

  // If only 2 players left, try to eliminate the other player
  if (SAlivePlayersCount()=2) and not (UBufferGet(401)=1) then begin
    // Set the strategy buffer to conventional warfare
    UBufferSet(401,1);
  end;

  // See if we should eliminate a player
  if ((cur_ter>0) or (TFrontsCount(cur_ter)>0)) and (UBufferGet(401)<>2) and (UBufferGet(401)<>1) then begin

    if total_num_my_armies>(average_enemy_armies*0.4) then begin

      for p:=1 to SPlayersCount() do begin
        if (p<>PMe()) and (PTerritoriesCount(p)>0) then begin
          if PTerritoriesCount(p)<5 then begin

            if ((cur_ter_armies-1)/2.5)>get_est_no_armies_conquer_player(cur_ter, p) then begin
              eliminate:=p;
              UBufferSet(402,double(eliminate));
              // Setting the strategy buffer to eliminating a player
              UBufferSet(401,2);
              program_to_eliminate:=PProgram(eliminate);
              ULog('Elimiating ' + program_to_eliminate);
            end;

          end;
        end;
      end;

    end;

  end;

  // Decide which attack we should use
  if UBufferGet(401)=0 then begin
    Migration_Attack(FromTerritory, ToTerritory);
  end else if UBufferGet(401)=1 then begin
    Conventional_Warfare_Attack(FromTerritory, ToTerritory);
  end else if UBufferGet(401)=2 then begin
    Eliminate_Player_Attack(trunc(UBufferGet(401)), FromTerritory, ToTerritory);
  end;

end;

procedure Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
begin

  USnapShotOn();
  UTakeSnapshot('Snapshot');

  if ( (UBufferGet(401)=0) or (UBufferGet(401)=2) ) and ( UBufferGet(451)=0 ) then begin
    Armies:=TArmies(FromTerritory)-1;
  end;

  // Conventional warfare occupation
  if UBufferGet(401)=1 then begin
    Conventional_Warfare_Occupation(FromTerritory, ToTerritory, Armies);
  end;

  // Increase the conquered territory counter
  UBufferSet(450, UBufferGet(450)+1);

  // Check for buffer override
  if UBufferGet(451)=-1 then begin
    // Don't send any more armies in occupation
    Armies:=0;
  end else if UBufferGet(451)>0 then begin
    // Send as many armies as in the occupation buffer
    Armies:=trunc(UBufferGet(451))
  end;

  // Reset the buffer override for every occupation where2
  if (UBufferGet(451)=-1) or (UBufferGet(451)>0) then begin
    UBufferSet(451, 0);
  end;

end;

procedure Fortification(var FromTerritory, ToTerritory, Armies: integer);
var
  cur_ter: integer;
  cur_ter_armies: integer;
begin

  // Reset the conquest counter
  UBufferSet(450, 0);

  if (UBufferGet(401)=0) or (UBufferGet(401)=2) then begin
    cur_ter:=get_territory_biggest_army();
    cur_ter_armies:=TArmies(cur_ter);

    if TFrontsCount(cur_ter)=0 then begin
      FromTerritory:=cur_ter;
      ToTerritory:=TPathToFront(cur_ter);
      Armies:=TArmies(FromTerritory)-1;
    end;

  end;

  // Conventional warfare fortification
  if UBufferGet(401)=1 then begin
    Conventional_Warfare_Fortification(FromTerritory, ToTerritory, Armies);
  end;

end;

begin
  ULogOn();
  ULog('Test');
end.