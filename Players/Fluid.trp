{
Program: Fluid

Author: Denahiro

Description: Tries to reduce the amount of fronts it has.
}

{
UBuffer usage:
}

{
Computes the effect of conquering a territory on the front line.

T: Territory to be conquered.
FrontsClosed: Number of my front territories that cease to be fronts if T is conquered.
FrontsChange: The change of enemy territories bordering on my territories if T is conquered.
}
procedure ComputeFronts(T: integer; var FrontsClosed, FrontsChange: integer);
var
  B,TActual: integer;
begin
  FrontsChange:=0;
  FrontsClosed:=0;
  for B:=1 to TBordersCount(T) do begin
    TActual:=TBorder(T,B);
    if TIsMine(TActual) then begin
      if TFrontsCount(TActual)=1 then begin
        FrontsClosed:=FrontsClosed+1;
      end;
      FrontsChange:=FrontsChange-1;
    end else begin
      FrontsChange:=FrontsChange+1;
    end;
  end;
end;

procedure Assignment(var ToTerritory: integer);
var
  T: integer;
  FrontsClosed,MaxFrontsClosed,TFrontsClosed: integer;
  FrontsChange,MinFrontsChange,TFrontsChange: integer;
begin
  // choose territories to reduce the frontline
  MaxFrontsClosed:=0;
  for T:=1 to 42 do begin
    if TOwner(T)=0 then begin
      ComputeFronts(T,FrontsClosed,FrontsChange);
      if (TFrontsChange=0) or (FrontsChange<MinFrontsChange) then begin
        MinFrontsChange:=FrontsChange;
        TFrontsChange:=T;
      end;
      if FrontsClosed>MaxFrontsClosed then begin
        MaxFrontsClosed:=FrontsClosed;
        TFrontsClosed:=T;
      end;
    end;
  end;
  if TFrontsClosed=0 then begin
    ToTerritory:=TFrontsChange;
  end else if MaxFrontsClosed>1 then begin
    ToTerritory:=TFrontsClosed;
  end else if MinFrontsChange<0 then begin
    ToTerritory:=TFrontsChange;
  end else begin
    ToTerritory:=TFrontsClosed;
  end;
end;

procedure Placement(var ToTerritory: integer);
var
  T,Armies,MinArmies: integer;
begin
  // balance all fronts
  for T:=1 to 42 do begin
    if TIsFront(T) then begin
      Armies:=TArmies(T);
      if (ToTerritory=0) or (Armies<MinArmies) then begin
        MinArmies:=Armies;
        ToTerritory:=T;
      end
    end;
  end;
end;

procedure Attack(var FromTerritory, ToTerritory: integer);
var
  T,B,TActual: integer;
  Armies,ArmiesForAttack,MaxArmies,TMaxArmies: integer;
  FrontsClosed,MaxFrontsClosed,FromFrontsClosed,ToFrontsClosed: integer;
  FrontsChange,MinFrontsChange,FromFrontsChange,ToFrontsChange: integer;
  MinDifference: integer;
begin
  FromTerritory:=0;
  ToTerritory:=0;
  MaxFrontsClosed:=0;
  if SConquest then begin
    MinDifference:=6;
  end else begin
    MinDifference:=2;
  end;
  for T:=1 to 42 do begin
    if not TIsMine(T) then begin
      if TPathToFront(T)>0 then begin
        ComputeFronts(T,FrontsClosed,FrontsChange);
        if (ToFrontsChange=0) or
           (FrontsChange<MinFrontsChange) or
           (FrontsClosed>MaxFrontsClosed) then begin
          ArmiesForAttack:=0;
          MaxArmies:=0;
          TMaxArmies:=0;
          for B:=1 to TBordersCount(T) do begin
            TActual:=TBorder(T,B);
            if TIsMine(TActual) then begin
              Armies:=(TArmies(TActual)-1)-(TPressure(TActual)-(TFrontsCount(TActual)-1)-TArmies(T));
              if Armies<0 then begin
                Armies:=0;
              end;
              ArmiesForAttack:=ArmiesForAttack+Armies;
              if Armies>MaxArmies then begin
                TMaxArmies:=TActual;
                MaxArmies:=Armies;
              end;
            end;
          end;
          if ArmiesForAttack-TArmies(T)>=MinDifference then begin
            if (ToFrontsChange=0) or (FrontsChange<MinFrontsChange) then begin
              MinFrontsChange:=FrontsChange;
              FromFrontsChange:=TMaxArmies;
              ToFrontsChange:=T;
            end;
            if FrontsClosed>MaxFrontsClosed then begin
              MaxFrontsClosed:=FrontsClosed;
              FromFrontsClosed:=TMaxArmies;
              ToFrontsClosed:=T;
            end;
          end;
        end;
      end;
    end;
  end;

  if ToFrontsClosed=0 then begin
    ToTerritory:=ToFrontsChange;
    FromTerritory:=FromFrontsChange;
  end else if MaxFrontsClosed>1 then begin
    ToTerritory:=ToFrontsClosed;
    FromTerritory:=FromFrontsClosed;
  end else if MinFrontsChange<0 then begin
    ToTerritory:=ToFrontsChange;
    FromTerritory:=FromFrontsChange;
  end else begin
    ToTerritory:=ToFrontsClosed;
    FromTerritory:=FromFrontsClosed;
  end;
end;

procedure Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
var
  ET,EA:integer;
  ArmiesFrom,ArmiesTo,ArmiesTotal:integer;
  ArmiesDesiredFrom:integer;
begin
  if TIsFront(FromTerritory) then begin
    if TIsFront(ToTerritory) then begin
      ArmiesTotal:=TArmies(FromTerritory)+TArmies(ToTerritory);
      TStrongestFront(FromTerritory,ET,EA);
      ArmiesFrom:=EA;
      TStrongestFront(ToTerritory,ET,EA);
      ArmiesTo:=EA;
      if ArmiesTotal<ArmiesFrom+ArmiesTo then begin // too few armies available
        ArmiesDesiredFrom:=round(double(ArmiesTotal)*double(ArmiesFrom)
            /double(ArmiesFrom+ArmiesTo));
      end else begin
        ArmiesDesiredFrom:=ArmiesFrom;
      end;
      Armies:=TArmies(FromTerritory)-ArmiesDesiredFrom;
      if Armies<0 then begin
        Armies:=0;
      end;
      if Armies>TArmies(FromTerritory)-1 then begin
        Armies:=TArmies(FromTerritory)-1;
      end;
    end else begin //To is not front
      Armies:=0;
    end;
  end else begin //From is not front
    //Move all
    Armies:=TArmies(FromTerritory)-1;
  end;
end;

procedure Fortification(var FromTerritory, ToTerritory, Armies: integer);
var
  T,B,TActual: integer;
  ET,EA: integer;
  Need,MaxNeed: integer;
  MaxArmies: integer;
begin
  // first check if we can directly fortify a front territory then search the largest
  // army and move it to the front
  FromTerritory:=0;
  ToTerritory:=0;
  Armies:=0;
  MaxNeed:=0;
  for T:=1 to 42 do begin
    if TIsMine(T) and (TArmies(T)>1) and (not TIsFront(T)) then begin
      for B:=1 to TBordersCount(T) do begin
        TActual:=TBorder(T,B);
        if TIsFront(TActual) then begin
          TStrongestFront(TActual,ET,EA);
          Need:=EA-TArmies(T)-TArmies(TActual);
          if (Need>MaxNeed)  or (ToTerritory=0) then begin
            MaxNeed:=Need;
            FromTerritory:=T;
            ToTerritory:=TActual;
          end;
        end;
      end
    end;
  end;

  if ToTerritory>0 then begin
    Armies:=TArmies(FromTerritory)-1;
  end else begin
    MaxArmies:=1;
    for T:=1 to 42 do begin
      if TIsMine(T) and (not TIsFront(T)) then begin
        if TArmies(T)>MaxArmies then begin
          MaxArmies:=TArmies(T);
          FromTerritory:=T;
        end;
      end;
    end;
    if FromTerritory>0 then begin
      ToTerritory:=TPathToFront(FromTerritory);
      Armies:=TArmies(FromTerritory)-1;
    end;
  end;
end;

begin
end.