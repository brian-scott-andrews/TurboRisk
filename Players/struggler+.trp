{
Program: Struggler+

Author: Nathan Scarbrough, March 2010
Credit to  Mario Ferrari for the original Struggler

Description: Plays just like Struggler except that if he see's an opportunity to kill a weak human player, he takes it.
He also has the same improved end game that frank+ and australian+ have.  The fortification routine has also been improved using the new TPathtoFront function.

}

{---------------------------------Kill Player Code---------------------------------------------------}
                                           // by Nathan Scarbrough (adapted from Vexer.trp)
                                           // uses UBuffers 52, 56, 63, 73, 74, 98, 99



function bg(x: integer): integer;
begin result:= trunc(UBufferGet(x)); end;

procedure bs(x, y: integer);
begin UBufferSet(x, y); end;

function PTC: integer; begin result:= PTerritoriesCount(PMe); end;

Function GameHasNoHumans: boolean;
var
  P: integer;
begin
  result:= true;
  for P:= 1 to 10 do begin
    if PHuman(P) and PAlive(P) then result:= false;
  end;
end;

function GameHasOneHuman(var P: integer): boolean;
Var Human, C: integer;
Begin
  C:= 0;
  For P:= 1 to 10 do begin
    If PHuman(P) and PAlive(P)then begin
      C:= C + 1;
      Human:= P;
    end;
  end;
  if C = 1 then begin
    result:= true;
    P:= Human;
  end else begin
    result:= false;
    P:= 0;
  end;
end;

procedure ArmySort(var Army: array of integer);
var
  TC, x, x1, temp, T: integer;
begin
  TC:= PTerritoriesCount(Pme);
  SetArrayLength(Army, 43);
  For T:= 1 to 42 do Army[T]:= 0;
  x:= 0;
  For T:= 1 to 42 do begin
    if TIsMine(T) then begin
      x:= x + 1;
      Army[x]:= T;
    end;
  end;
  For x:= 1 to TC - 1 do begin
    For x1:= x + 1 to TC do begin
      if TArmies(Army[x1]) > TArmies(Army[x]) then begin
        temp:= Army[x];
        Army[x]:= Army[x1];
        Army[x1]:= temp;
      end;
    end;
  end;
end;

Function BestFT(TT: integer): integer;
var
  MaxArmy, B, BT: integer;
Begin
  Result:= 0;
  MaxArmy:= 0;
  For B:= 1 to TBordersCount(TT) do begin
    BT:= TBorder(TT, B);
    if TIsMine(BT) and (TArmies(BT) > MaxArmy) then begin
      MaxArmy:= TArmies(BT);
      Result:= BT;
    end;
  end;
end;

Function TsAreConnected(P, T, T1: integer): boolean;
Var
  X, BT, C, B: integer;
  TOwnerIsPlayerP, Checked: array of boolean;
begin
  SetArrayLength(Checked, 43);
  For x:= 1 to 42 do Checked[x]:= False;
  SetArrayLength(TOwnerIsPlayerP, 43);
  For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

  Result:= False;
  TOwnerIsPlayerP[T]:= True;
  if (  not ( TIsMine(T1) and TIsMine(T) )  ) and TIsBordering(T, T1) then Result:= True;
  Repeat
    if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
      C:= 0;
      For B:= 1 to TBordersCount(T) do begin
        BT:= TBorder(T, B);
        if ( (TOwner(BT) = P) or ((TOwner(BT) <> PMe) and (P = 0)) ) and (not TOwnerIsPlayerP[BT]) then begin
          C:= C + 1;
          TOwnerIsPlayerP[BT]:= True;
          if TIsBordering(BT, T1) then begin
            Result:= True;
            exit;
          end;
        end;
      end;
      Checked[T]:= True;
      if C > 0 then T:= 0;
    end;
    T:= T + 1;
  Until (T > 42);
end;

Procedure AddConnectedTsArmies(T: integer; var CTArmies, Ts: Integer);
Var
  P, X, BT, C, B: integer;
  TOwnerIsPlayerP, Checked: array of boolean;
begin
  SetArrayLength(Checked, 43);
  For x:= 1 to 42 do Checked[x]:= False;
  SetArrayLength(TOwnerIsPlayerP, 43);
  For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

  P:= TOwner(T);
  TOwnerIsPlayerP[T]:= True;
  CTArmies:= 0;
  Ts:= 0;
  Repeat
    if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
      C:= 0;
      For B:= 1 to TBordersCount(T) do begin
        BT:= TBorder(T, B);
        if (TOwner(BT) = P) and (not TOwnerIsPlayerP[BT]) then begin
          C:= C + 1;
          TOwnerIsPlayerP[BT]:= True;
        end;
      end;
      Checked[T]:= True;
      CTArmies:= CTArmies + TArmies(T);
      Ts:= Ts + 1;
      if C > 0 then T:= 0;
    end;
    T:= T + 1;
  Until (T > 42);
end;

procedure RankSort(var Rank: array of integer);
var
  temp, APC, x, x1, P: integer;
begin
  x:= 0;
  SetArrayLength(Rank, 11);
  For P:= 1 to 10 do Rank[P]:= 0;
  For P:= 1 to 10 do begin
    if (PArmiesCount(P) > 0) then begin
      x:= x + 1;
      Rank[x]:= P;
    end;
  end;
  APC:= SAlivePlayersCount;
  For x:= 1 to APC - 1 do begin
    For x1:= x + 1 to APC do begin
      if PArmiesCount(Rank[x1]) > PArmiesCount(Rank[x]) then begin
        temp:= Rank[x];
        Rank[x]:= Rank[x1];
        Rank[x1]:= temp;
      end;
    end;
  end;
end;

Procedure KillPAttack(P, FT: integer; var TT: integer);
Var
  Distance1, Distance2, C1, tempTT, Total2, ST, B1, Total, X, BT, C, B, T: integer;
  TOwnerIsPlayerP, Checked: array of boolean;
begin

  SetArrayLength(Checked, 43);
  SetArrayLength(TOwnerIsPlayerP, 43);

  TT:= 0;
  For B1:= 1 to TBordersCount(FT) do begin

    For x:= 1 to 42 do Checked[x]:= False;
    For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

    T:= TBorder(FT, B1);
    if (Not ((TArmies(FT) < 4) and (TArmies(T) > 1))) then begin
      if (  (TOwner(T) = P) or ( (P = 0) and (TOwner(T) <> PMe) )  ) then begin
        C:= 0;
        For B:= 1 to TBordersCount(T) do
         if (  (TOwner(TBorder(T, B)) = P) or ( (P = 0) and (TOwner(TBorder(T, B)) <> PMe) )  )
          then C:= C + 1;
        if (C = 0) and (TArmies(FT) > TArmies(T)) then begin
          TT:= T;
          exit;
        end;

        tempTT:= T;
        TOwnerIsPlayerP[T]:= True;
        Total:= 0;
        Repeat
          if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
            C:= 0;
            For B:= 1 to TBordersCount(T) do begin
              BT:= TBorder(T, B);
              if (  (TOwner(BT) = P) or ( (P = 0) and (TOwner(BT) <> PMe) )  )
               and (not TOwnerIsPlayerP[BT]) then begin
                C:= C + 1;
                TOwnerIsPlayerP[BT]:= True;
              end;
            end;
            Checked[T]:= True;
            Total:= Total + 1;
            ST:= T;
            if C > 0 then T:= 0;
          end;
          T:= T + 1;
        Until (T > 42);

        For x:= 1 to 42 do Checked[x]:= False;
        For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

        T:= ST;
        TOwnerIsPlayerP[T]:= True;
        Total2:= 0;
        Repeat
          if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
            C:= 0;
            For B:= 1 to TBordersCount(T) do begin
              BT:= TBorder(T, B);
              if (  (TOwner(BT) = P) or ( (P = 0) and (TOwner(BT) <> PMe) )  )
               and (not TOwnerIsPlayerP[BT]) and (not (BT = tempTT)) then begin
                C:= C + 1;
                TOwnerIsPlayerP[BT]:= True;
              end;
            end;
            Checked[T]:= True;
            Total2:= Total2 + 1;
            if C > 0 then T:= 0;
          end;
          T:= T + 1;
        Until (T > 42);

        if Total2 = Total - 1 then begin
          if TT = 0 then TT:= TempTT else begin
            C:= 0; C1:= 0;
            For B:= 1 to TBordersCount(TT) do
             if (TOwner(TBorder(TT, B)) = P) or ( (P = 0) and (TOwner(TBorder(TT, B)) <> PMe) ) then C:= C + 1;
            For B:= 1 to TBordersCount(TempTT) do
             if (TOwner(TBorder(TempTT, B)) = P) or ( (P = 0) and (TOwner(TBorder(TempTT, B)) <> PMe) ) then C1:= C1 + 1;
            if C1 < C then TT:= TempTT;
            If (C = 1) and (C1 = 1) and TIsBordering(TT, TempTT) then begin
              Distance1:= 0;
              Distance2:= 0;
              For T:= 1 to 42 do begin
                if (TOwner(T) <> Pme) and (not ((T = TT) or (T = TempTT)) ) then begin
                  if (TDistance(T, TT) < Distance1) or (Distance1 = 0) then Distance1:= TDistance(T, TT);
                  if (TDistance(T, TempTT) < Distance2) or (Distance2 = 0) then Distance2:= TDistance(T, TempTT);
                end;
              end;
              if Distance2 > Distance1 then TT:= TempTT;
            end;
          end;
        end;
      end;
    end;
  end;
end;

procedure KillPlayer_Placement(var ToTerritory: integer);
var
  BFT, Priority, aMinCost, P, WP, Extra2, Extra, BT1, Total, B, BT, Y, CTArmies, Ts,
  MyArmies, TT, PL, EA, Cost, T, minPressure, x: integer;

  MinCost, Rank, Army: array of integer;
  HasEnough: array of boolean;
  pathexists, go: boolean;
begin
  setarraylength(HasEnough, 43);
  setarraylength(MinCost, 43);

  ToTerritory:=0;
  ArmySort(Army);
  RankSort(Rank);

  if Rank[SAlivePlayersCount] <> PMe then WP:= Rank[SAlivePlayersCount] else WP:=0;
  if GameHasOneHuman(P) then WP:= P;
  bs(63, WP);


  if (bg(52) > 0) and (bg(56) > 0) then ToTerritory:= bg(52) else begin
    if SAlivePlayersCount > 2 then begin
      MyArmies:= 0;
      // need to take into account two non adjoining ts
      For T:= 1 to 42 do begin
        if (TOwner(T) = WP) and (TFrontsCount(T) = 0) then begin // Enemy T is surrounded by me
          For B:= 1 to TBordersCount(T) do begin
            BT:= TBorder(T, B);
            MyArmies:= MyArmies + TArmies(BT) - 1;
          end;
          BFT:= BestFT(T);
          if MyArmies < TPressure(BFT) + TFrontsCount(BFT) + 3 then begin
            ToTerritory:= BFT;
            exit;
          end;
        end;
      end;

      aMinCost:= 999999999;
      Priority:= 0;
      For x:= 1 to PTC do begin
        MinCost[Army[x]]:= 999999999;
        For T:= 1 to 42 do begin
         if TOwner(T) = WP then begin
           Cost:= 0;
           PathExists:= False;
           if TWeakestPath(Army[x], T, TT, PL, EA) then begin
             PathExists:= True;
             Cost:= PL + EA - TArmies(Army[x]);
             if (Cost < MinCost[Army[x]]) then MinCost[Army[x]]:= Cost;
           end;
         end;
        end;
        if PathExists then begin
          if MinCost[Army[x]] < aMinCost then begin
            aMinCost:= MinCost[Army[x]];
            Priority:= x;
          end;
        end;
      end;
      if priority > 0 then begin
        Cost:= aMinCost + TArmies(Army[Priority]);
        if TArmies(Army[Priority]) < Cost + PArmiesCount(WP) + PTerritoriesCount(WP) then begin
          ToTerritory:= Army[Priority];
          exit;
        end;
      end;
    end;

    bs(52, 0);
    Extra2:= bg(56);
    for x:= 1 to 42 do HasEnough[x]:= False;
    Repeat
      for Y:= 1 to PTC do begin
        If TIsFront(Army[y]) then begin
          Total:= 0;
          go:= True;
          if Y > 1 then for x:= Y-1 downto 1 do
           if HasEnough[Army[x]] then if TsAreConnected(0, Army[y], Army[x]) then go:= False;
          if go then begin
            Total:= 0;
            For B:= 1 to TFrontsCount(Army[y]) do begin
              BT:= TFront(Army[y], B);
              go:= True;
              if B > 1 then for x:= B-1 downto 1 do begin
                BT1:= TFront(Army[y], x);
                if TsAreConnected(0, BT, BT1) then go:= False;
              end;
              If go then begin
                AddConnectedTsArmies(BT, CTArmies, Ts);
                Total:= Total + CTArmies + Ts;
              end;
            end;
            Extra:= Ts div 3;
            if Extra < 2 then Extra:= 2;
            if TArmies(Army[y]) < Total + Extra + Extra2 then begin
              If ToTerritory = 0 then begin
                ToTerritory:= Army[y];
                minPressure:= TPressure(Army[y]);
              end else begin
                if (TPressure(Army[y]) < minPressure) then begin
                  minPressure:= TPressure(Army[y]);
                  ToTerritory:= Army[y];
                end;
              end;
            end else HasEnough[Army[y]]:= True;
          end;
        end;
      end;
      If ToTerritory = 0 then begin
        Extra2:= Extra2 + 4;
        bs(56, Extra2);
      end;
    Until ToTerritory > 0;
  end;

  if Extra2 >= 12 then bs(52, ToTerritory);
  if PNewArmies(PMe) = 1 then begin
    bs(52, 0);
    bs(56, 0);
  end;
end;

procedure KillPlayer_Attack(var FromTerritory, ToTerritory: integer);
var
  loop, WP, P, B, BT, PL, x, Cost, TT, EA,
  MaxCost, C, Armies, Y, MinCost, MinDiff: integer;

  Rank, Army: Array of integer;

begin
  // the occupation routine sometimes determines where the next attack should be and stores it in buffer 73
  if (bg(73) > 0) and (TArmies(bg(73)) > 1) then begin
    FromTerritory:= bg(73);
    KillPAttack(bg(74), FromTerritory, ToTerritory);
    if ToTerritory > 0 then exit else begin
      FromTerritory:= 0;
      bs(73, 0);
    end;
  end;

  RankSort(Rank);
  ArmySort(Army);
  if Rank[SAlivePlayersCount] <> PMe then WP:= Rank[SAlivePlayersCount] else WP:=0;
  if GameHasOneHuman(P) then WP:= P;
  bs(63, WP);
  MinCost:= 0;
  MaxCost:= PArmiesCount(PMe) div 2;

  loop:= 0;
  Repeat
  For y:= 1 to PTC do begin
    if TIsFront(Army[y]) and (TArmies(Army[y]) > 1) then begin
      C:= 0;
      For B:= 1 to TBordersCount(Army[y]) do begin
        BT:= TBorder(Army[y], B);
        If (TOwner(BT) = WP) or ( (WP = 0) and (not TIsMine(BT)) ) then begin
          C:= C + 1;
          If C = 1 then TT:= BT else TT:= 0;
        end;
      end;
      If C = 1 then begin
        if (  not ( (TArmies(TT) > 1) and (TArmies(BestFT(TT)) < 4) )  ) then begin
          ToTerritory:= TT;
          FromTerritory:= BestFT(ToTerritory);
          exit;
        end;
      end else if c > 1 then begin
        KillPAttack(WP, Army[y], TT);
        If TT > 0 then begin
          ToTerritory:= TT;
          FromTerritory:= Army[y];
          exit;
        end;
      end;
      If C > 1 then begin
        MinDiff:= 0;
        For B:= 1 to TBordersCount(Army[y]) do begin
          BT:= TBorder(Army[y], B);
          If (TOwner(BT) = WP) or ( (WP = 0) and (not TIsMine(BT)) )
           and (not ( (TArmies(BT) > 1) and (TArmies(BestFT(BT)) < 4) )) then begin
            if (trunc(abs(Army[y] - BT)) < MinDiff) or (MinDiff = 0) then begin
              MinDiff:= trunc(abs(Army[y] - BT));
              ToTerritory:= BT;
              FromTerritory:= BestFT(ToTerritory);
            end;
          end;
        end;
      end;
    end;

    if FromTerritory = 0 then begin
      For x:= 1 to 42 do begin
        IF TOwner(x) = WP then begin
          If TWeakestPath(Army[y], x, TT, PL, EA) then begin
            Armies:= TArmies(Army[y]);
            Cost:= EA + PL;
            if ( (Cost < MinCost) or (MinCost = 0) ) and (Armies > TArmies(TT))
             and (Armies > 3) and (Cost < MaxCost) then begin
              MinCost:= Cost;
              ToTerritory:= TT;
              FromTerritory:= BestFT(ToTerritory);
            end;
          end;
        end;
      end;
    end;

  end;
  loop:= loop + 1;
  if (ToTerritory = 0) and (bg(99) > 0) then WP:= 0;
  Until (ToTerritory > 0) or (loop > 1);
end;

procedure KillPlayer_Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
var
  c, TTtotal, FTtotal, T, P, BothTotal, FTA: integer;
  TsConnTT, TsConnFT, TsConnBoth: boolean;
  Army: array of integer;
begin
  bs(73, 0);
  P:= 0;
  FTA:= TArmies(FromTerritory) - 1;
  Armies:=FTA;  // Default is to occupy all
  ArmySort(Army);

  TTtotal:= 0;
  FTtotal:= 0;
  BothTotal:= 0;
  For T:= 1 to 42 do begin
    if ( ((P = 0) and (TOwner(T) <> PMe)) or (TOwner(T) = P) ) then begin
      TsConnTT:= TsAreConnected(P, T, ToTerritory);
      TsConnFT:= TsAreConnected(P, T, FromTerritory);
      if TsConnTT and TsConnFT then TsConnBoth:= True else TsConnBoth:= False;
      if TsConnBoth then BothTotal:= BothTotal + TArmies(T) + 1;
      if TsConnTT and (not TsConnFT) then TTtotal:= TTtotal + TArmies(T) + 1;
      if TsConnFT and (not TsConnTT) then FTtotal:= FTtotal + TArmies(T) + 1;
    end;
  end;
  TTtotal:= TTtotal + 1;  // make sure TTtotal has enough so add an extra army
  if TTtotal > FTA then Armies:= FTA;
  if (TTtotal < FTA) and (FTtotal >= FTA-TTtotal) then Armies:= TTtotal;
  if (TTtotal < FTA) and (FTtotal < FTA-TTtotal) then Armies:= FTA - FTtotal;
  if (TTtotal = 0) and (FTtotal = 0) then Armies:= FTA;
  if (TTtotal = 0) and (FTtotal <> 0) then Armies:= 0;
  if (TTtotal = 0) and (FTtotal <> 0) and (BothTotal <> 0) then begin
    if (FTtotal < BothTotal) then Armies:= FTA - FTtotal;
    if (FTtotal > BothTotal) then Armies:= BothTotal;
    if Armies > FTA then Armies:= FTA;
    bs(73, ToTerritory);
    bs(74, P);
  end;
  if (FromTerritory = 31) and (ToTerritory = 39) then begin
    c:= 0;
    For T:= 40 to 42 do if (TOwner(T) <> PMe) then c:= c + TArmies(T) + 2;
    Armies:= c;
    if Armies > FTA then Armies:= FTA;
  end;
end;

procedure KillPlayer_Fortification(var FromTerritory, ToTerritory, Armies: integer);
Var
  FT, P, WP, aMinPL, B, BT, Cost, TT, PL, EA, aMinCost, x, MaxArmy, T: integer;
  Rank, MinPL, TTa, MinCost, Army: array of integer;

begin
  FromTerritory:= 0;
  ToTerritory:= 0;
  ArmySort(Army);
  RankSort(Rank);
  SetArrayLength(MinCost, 43);
  SetArrayLength(MinPL, 43);
  SetArrayLength(TTa, 43);

  if Rank[SAlivePlayersCount] <> PMe then WP:= Rank[SAlivePlayersCount] else WP:=0;
  if GameHasOneHuman(P) then WP:= P;

  For x:= 1 to PTC do begin
    MinCost[Army[x]]:= 0;
    MinPL[x]:= 0;
    TTa[x]:= 0;
    For T:= 1 to 42 do begin
     if TOwner(T) = WP then begin
       Cost:= 0;
       if TWeakestPath(Army[x], T, TT, PL, EA) then begin
         Cost:= PL + EA - TArmies(T);
         if (Cost < MinCost[Army[x]]) or (MinCost[Army[x]] = 0) then MinCost[Army[x]]:= Cost;
       end;
       if (not TIsFront(Army[x])) and (TArmies(Army[x]) > 3) then begin
         TShortestPath(Army[x], T, TT, PL);
         if (PL < MinPL[x]) or (MinPL[x] = 0) then begin
           MinPL[x]:= PL;
           TTa[x]:= TT;
         end;
       end;
     end;
    end;
  end;

  if SAlivePlayersCount > 2 then begin
    aMinCost:= 0;
    For x:= PTC downto 1 do begin
      if TArmies(Army[x]) > 1 then begin
        For B:= 1 to TBordersCount(Army[x]) do begin
          BT:= TBorder(Army[x], B);
          if TIsMine(BT) then begin
            if MinCost[BT] > 0 then begin
              if ( (MinCost[BT] < MinCost[Army[x]]) or (MinCost[Army[x]] = 0) ) and ((MinCost[BT] <= aMinCost) or (AMinCost = 0)) then begin
                if (  (MinCost[BT] = aMinCost) and ( (TArmies(BT) > TArmies(ToTerritory)) or (TArmies(Army[x]) > TArmies(FromTerritory)) )  ) or (MinCost[BT] <> aMinCost) then begin
                  aMinCost:= MinCost[BT];
                  FromTerritory:= Army[x];
                  ToTerritory:= BT;
                  Armies:= TArmies(FromTerritory) - 1;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;

  if FromTerritory = 0 then begin
    aMinPL:= 0;
    For x:= 1 to PTC do begin
      if ( (MinPL[x] <= aMinPL) or (aMinPL = 0) ) and (MinPL[x] > 0) then begin
        if (  (MinPL[x] = aMinPL) and ( (TArmies(TTa[x]) > TArmies(ToTerritory)) or (TArmies(Army[x]) > TArmies(FromTerritory)) )  ) or (MinPL[x] <> aMinPL) then begin
          aMinPL:= MinPL[x];
          FromTerritory:= Army[x];
          ToTerritory:= TTa[x];
          Armies:= TArmies(FromTerritory) - 1;
        end;
      end;
    end;
  end;

  if (FromTerritory = 0) or (bg(63) = 0) then begin
    MaxArmy:= 1;
    For T:= 1 to 42 do begin
      if TIsMine(T) and (not TIsFront(T)) then begin
        if (TArmies(T) > MaxArmy) then begin
          MaxArmy:= TArmies(T);
          FT:= T;
          Armies:= TArmies(FromTerritory) - 1;
        end;
      end;
    end;
    if (FT > 0) and (not (FT = FromTerritory)) then begin // if it's the same FT that the previous code determined, don't change the ToTerritory
      if not (  (FromTerritory > 0) and ( (TArmies(FT) < 4) and (TArmies(FromTerritory) > 3) )  ) then begin
        FromTerritory:= FT;      // might not be neccessary to do the following > 0 check
        if TPathToFront(FromTerritory) > 0 then ToTerritory:= TPathToFront(FromTerritory) else FromTerritory:= 0;
        Armies:= TArmies(FromTerritory) - 1;
      end;
    end;
  end;

end;

{-------------------------------------End Kill Player Code---------------------------------}



function AssignEval(T: integer): double;
  var
    FreeT,            // free territories on the continent  #*# changed to double
    Points: double;   // value assigned to the FROM/TO pair
    C,CT,             // continent, territories on the continent
    AF,AT,            // armies on FROM and TO teritories
    PT,PA,            // my territories and armies on FROM continent
    ET,EA,            // enemy territories and armies on FROM continent
    LP,               // leader player on FROM continent
    LT,LA: integer;   // leader's territories and armies on FROM continent

begin
    Points:=0;
    C:=TContinent(T);
    CT:=CTerritoriesCount(C);
    CAnalysis(C,PT,PA,ET,EA);
    CLeader(C,LP,LT,LA);
    FreeT:=CT-PT-ET;
    // the leader of the continent it's not me and owns all territories less one
    if LP>0 then begin
      if (LP<>PMe) and (LT>=CT-1) then begin
        Points:=Points+100.0;    // I must avoid enemy conquers the continent
      end;
    end;
    // evaluate my chances to conquer the continent
    // needed to change freeT to double to get this line to not truncate freeT/splayerscount
    Points:=Points+1.0*(PT+1+FreeT/SPlayersCount)/(ET+FreeT*SPlayersCount/(SplayersCount-1));
    result:=Points;
end;


function PlaceEval(TF,TT: integer): double;
  var
    Points,temp: double;   // value assigned to the FROM/TO pair
    CF,CT,            // FROM and TO continents
    AF,AT,            // armies on FROM and TO teritories
    PT,PA,            // my territories and armies on FROM continent
    ET,EA,            // enemy territories and armies on FROM continent
    LP,               // leader player on FROM continent
    LT,LA: integer;   // leader's territories and armies on FROM continent
begin
    Points:=0;
    CF:=TContinent(TF);
    CT:=TContinent(TT);
    AF:=TArmies(TF);
    AT:=TArmies(TT);
    // FROM and TO territories are on different continents
    if CF<>CT then begin
      // enemy owns the TO continent
      if COwner(CT)>0 then begin
        Points:=Points+2.0;
      end;
      // I own the FROM continent and is not well defended
      temp := (double(TPressure(TF))) / (double(AF)); 
      if (COwner(CF)>0) and (temp>1.0) then begin
        Points:=Points+3.0;
      end;
    end else begin
    // FROM and TO territories are on the same continent
      CAnalysis(CF,PT,PA,ET,EA);
      CLeader(CF,LP,LT,LA);
      // the leader of the continent it's not me and owns all territories less one
      temp := (double(TPressure(TF))) / (double(AF));
      if (LP<>PMe) and (LT=ET) and (temp>0.2) then begin
        Points:=Points+10.0;    // I must resist!
      end;
      // evaluate my chances to conquer the continent
      Points:=Points+1.0*(PA+1)/(EA+ET);
    end;
    // if enemy owns just one territory, I try to kill him to get his cards
    if PTerritoriesCount(TOwner(TF))<2 then begin
      Points:=Points+20.0;
    end;
    // Generic evaluations about strength ratio
    Points:=Points+0.5*(double(TPressure(TF))/AF)  // #*#
 result:=Points;
end;


function AttackEval(TF,TT: integer): double;
  var
    Points: double;   // value assigned to the FROM/TO pair
    CF,CT,            // FROM and TO continents
    AF,AT,            // armies on FROM and TO teritories
    PT,PA,            // my territories and armies on FROM continent
    ET,EA,            // enemy territories and armies on FROM continent
    LP,               // leader player on FROM continent
    LT,LA: integer;   // leader's territories and armies on FROM continent
begin
    Points:=0;
    CF:=TContinent(TF);
    CT:=TContinent(TT);
    AF:=TArmies(TF);
    AT:=TArmies(TT);
    // FROM and TO territories are on different continents
    if CF<>CT then begin
      // enemy owns the TO continent
      if COwner(CT)>0 then begin
        Points:=Points+2.0;
      end;
    end
    // FROM and TO territories are on the same continent
    else begin
      CAnalysis(CF,PT,PA,ET,EA);
      CLeader(CF,LP,LT,LA);
      // evaluate my chances to conquer the continent
      Points:=Points+1.0*(PA+1)/(EA+ET);
    end;
    // if enemy owns just one territory, I try to kill him to get his cards
    if PTerritoriesCount(TOwner(TF))<2 then begin
      Points:=Points+20.0;
    end;
    // if haven't conquered a territory, add some points for
    // a generic evaluation of the attack ratio
    if not SConquest then begin
      Points:=Points+1.0*AF/AT;
    end;
    result:=Points;
end;



procedure Assignment(var ToTerritory: integer);
var
  T: integer;
  Value,MaxValue: double;

  // evaluation function for the unassigned territory T

begin
  // choose unassigned territory with greatest value
  ToTerritory:=0;
  MaxValue:=0;
  for T:=1 to 42 do begin
    if TOwner(T)=0 then begin  // territory is unassigned
      Value:=AssignEval(T);
      if Value>MaxValue then begin
        ToTerritory:=T;
        MaxValue:=Value;
      end;
    end;
  end;
end;






procedure Placement(var ToTerritory: integer);
var
  T,T2,F: integer;
  Value,MaxValue: double;

  // evaluation function for the pair "territory from"-"territory to" (TF-TT)

begin // Placement
  // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Placement(ToTerritory);
    exit;
  end;

  // reinforce front territory with greatest value
  ToTerritory:=0;
  MaxValue:=0;
  for T:=1 to 42 do begin
    if TIsFront(T) then begin  // territory is mine and front
      for F:=1 to TFrontsCount(T) do begin
        T2:=TFront(T,F);
        Value:=PlaceEval(T,T2);
        if Value>MaxValue then begin
          ToTerritory:=T;
          MaxValue:=Value;
        end;
      end;
    end;
  end;
end;





procedure Attack(var FromTerritory, ToTerritory: integer);
var
  T,T2,F,FCount: integer;
  Ratio,Value,MaxValue: double;

  // Evaluation function for the pair "territory from"-"territory to" (TF-TT).
  // It return a value > 1 for strategic attacks

begin
  // reset kill mode if the game no longer has human players
  if UBufferGet(98) > 0 then begin
   if GameHasNoHumans then UBufferSet(98, 0);
  end;

  // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Attack(FromTerritory, ToTerritory);
    If (not ((FromTerritory = 0) and (UBufferGet(98) > 0))) then exit;
  end;

  // perform the attack with highest point value if force ratio>=1.2
  FromTerritory:=0;
  ToTerritory:=0;
  MaxValue:=0;
  // scan all territories
  for T:=1 to 42 do begin
    if TIsFront(T)                      // territory is mine and front
    and (TArmies(T)>1) then begin       // and attack is possible
      // scan all possible fronts
      FCount:=TFrontsCount(T);
      for F:=1 to FCount do begin
        T2:=TFront(T,F);
        Ratio := TArmies(T) / TArmies(T2);
        if Ratio>=1.2 then begin
          Value:=AttackEval(T,T2);
          // consider only strategic attacks
          if Value>=1.0 then begin
            if Value>MaxValue then begin
              FromTerritory:=T;
              ToTerritory:=T2;
              MaxValue:=Value;
            end;
          end; 
        end;
      end;
    end;
  end;
 
  UbufferSet(7, (Fromterritory + ((double(ToTerritory))/100))); //#*#

end;

procedure Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
var
  FromIsFront, ToIsFront: boolean;
begin
    // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Occupation(FromTerritory, ToTerritory, Armies);
    exit;
  end;


  // very simple but effective routine

  FromTerritory:= trunc(UbufferGet(7));	//#*#
  ToTerritory:= round((UbufferGet(7)-trunc(UbufferGet(7)))*100);	//#*#

  FromIsFront := TIsFront(FromTerritory);
  ToIsFront := TIsFront(ToTerritory);
  Armies:=0;

  // if both territories are 'front'
  if  FromIsFront and ToIsFront then begin
    // balance armies
    Armies:=(TArmies(FromTerritory)-TArmies(ToTerritory)) div 2;

  // if "From" territory is front
  end else if FromisFront then begin
    // all armies stay in From territory, so there's nothing to do

  // in the other cases
  end else begin
    // all armies in the conquered territory (except one which must stay)
    Armies:=TArmies(FromTerritory)-1;
  end;
end;

procedure Fortification(var FromTerritory, ToTerritory, Armies: integer);
var
  T,B,MaxArmy: integer;

    // Kill Player variables
  extra, X, C, C1, TotalEnemyArmies, P, MaxPArmiesCount: integer;
  Human, Abort: boolean;
  TM: double;
begin

  if GameHasOneHuman(P) then begin
    C:= 0;
    C1:= 0;
    For X:= 1 to 10 do begin
      if PActive(X) and (PProgram(X) = 'vexer.trp') then C:= C + 1;   // check to see if Vexer is dead
      if PAlive(X) and (PProgram(X) = 'vexer.trp') then C1:= C1 + 1;
    end;
    extra:= 0;
    if (PCardTurnInValue(P) > PCardTurnInValue(PMe)) and (PCardCount(P) > 1) then Extra:= PCardTurnInValue(P) - PCardTurnInValue(PMe);
    If (C = 1) and (C1 = 0) and ( PArmiesCount(PMe) > (2 * PArmiesCount(P) + 3) + Extra ) then begin
      UBufferSet(98, 1);
    end;
    if PArmiesCount(PMe) > (3 * PArmiesCount(P)) then begin
      UBufferSet(98, 1);
    end;
  end;


  {----------------------------------finisher----------------------------------}
  // improved finisher.trp code
  if (UBufferGet(99) = 0) and (PCardCount(PMe) > 2) then begin
    if SCardsBasedOnCombo then TM:= 1.0 else TM:=0.8;
    Abort:=False;
    Human:=False;
    TotalEnemyArmies:=0;
    MaxPArmiesCount:=0;	// The number of armies that my strongest enemy has
    for P:= 1 to 10 do begin
      if (PAlive(P)) and (P<>PMe) then begin
        if PArmiesCount(P) >= MaxPArmiesCount then begin
          MaxPArmiesCount:= PArmiesCount(P);
          if (not (PArmiesCount(P) = MaxPArmiesCount)) then Abort:=False;	// 1st and 2nd strongest armies are the same, don't reset abort to false
          if (PCardCount(P) > 2) and (PCardTurnInValue(P) > 25) then Abort:= True;
        end;
        if PHuman(P) and (PCardCount(P) > 3) and (PCardTurnInValue(P) > 20) then Abort:= True;
        if PHuman(P) then begin
          if (not (PArmiesCount(P) < trunc(double(PArmiesCount(PMe)) * 0.25))) then TM:= TM + 0.2;
          If PCardTurnInValue(P) > PCardTurnInValue(PMe) then TotalEnemyArmies:= TotalEnemyArmies + PCardTurnInValue(P) - PCardTurnInValue(PMe);
        end;
        If (pos('vexer', lowercase(PProgram(P))) > 0) then begin
          if (not (PArmiesCount(P) < trunc(double(PArmiesCount(PMe)) * 0.25))) then TM:= TM + 0.2;
          if (PCardCount(P) > 3) and (PCardTurnInValue(P) > 25) then Abort:= True;
          If PCardTurnInValue(P) > PCardTurnInValue(PMe) then TotalEnemyArmies:= TotalEnemyArmies + PCardTurnInValue(P) - PCardTurnInValue(PMe);
        end;                                                    // pretend there are more enemy armies if his CTIV is greater then mine
        TotalEnemyArmies:= TotalEnemyArmies + PArmiesCount(p);
      end;
    end;

    // if there's more than 4 players, I'll get a lot of cards by killing them so then lower the threshold multiplier
    if (SAlivePlayersCount > 4) then TM:= TM - 0.1;

    // if I have a lot of armies then lower TM because on average when attacking 3 dice against 2
    // I'll take out 7 enemy armies for every 6 I lose, so I need less armies to win
    if (PArmiesCount(PMe) > 200) then begin
      TM:= TM * 0.9;
      abort:= false;
    end;
    if (PArmiesCount(PMe) > 400) then TM:= TM * 0.95;

    if (PArmiesCount(PMe) > trunc(TotalEnemyArmies * TM)) and (NOT Abort) then UBufferSet(99, 1);
    if (PArmiesCount(PMe) > trunc(TotalEnemyArmies*1.4)) then UBufferSet(99, 1);		// If TM > 1.4 then switch to Kill Player even if Abort = true
  end;

  // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Fortification(FromTerritory, ToTerritory, Armies);
    exit;
  end;


  FromTerritory:=0;
  ToTerritory:=0;
  Armies:=0;

  // look for the greatest number of armies which are not on a front territory
  // and move them toward the nearest front
  if FromTerritory = 0 then begin
    MaxArmy:= 1;
    For T:= 1 to 42 do begin
      if TIsMine(T) and (not TIsFront(T)) then begin
        if (TArmies(T) > MaxArmy) then begin
          MaxArmy:= TArmies(T);
          FromTerritory:= T;
          ToTerritory:= TPathToFront(T);
          Armies:=TArmies(T)-1; // Move all armies to destination
        end;                    // (except the one which must stay)
      end;
    end;
  end;
end;

begin
end.