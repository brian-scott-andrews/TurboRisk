{
Program: Finisher                 Author: Nathan Scarbrough
                                                     Email: Nathan.Scarbrough@gmail.com

Description: This is a super aggressive TRP that wins one on one games against most TRPs and sometimes wins 3 players games.

Actually this player is meant to be combined with other TRPs to create hybrids that are stronger, more realistic players.

A Finisher hybrid will play as the other TRP until it has more armies than all the other players combined at which point the finisher code takes over to quickly and efficiently finish the game within just a few turns.

This drastic change of strategy mimics what humans do when they see the opportunity to take the whole board at once.  If you find that your TRP conquers the world with hundreds of left over armies, then you should consider adding the Finisher code.  Finisher typically conquers the world with fewer than 100 armies left.

To create a hybrid simply copy and paste the variable declarations and code from each of your 5 procedures into Finishers procedures.

History: Version 1.0 June 2009
}

{ INSTRUCTIONS:

  To make a hybrid, paste your functions up here and then scroll down to the bottom
  and paste your variable declarations into the procedures.
  Then paste the code from your procedures into the designated places.
  
  Finisher works best with TRPs that keep all of their armies on fronts, however this is not a requirement.
  If Finisher fails to conquer the world because too many of your armies are not on fronts,
  then do a search for #*# and then increase the initial value of the variable TM

  The only requirement is that your TRP doesn't use UBuffer 100.
  Finisher uses this buffer to keep track of when the hybrid TRP is in Finisher mode. }
  

procedure FinisherAssignment(var ToTerritory: integer);
var
  T: integer;
begin
  // find the first free territory
  ToTerritory:= 0;
  T:= 1;
  repeat
    if TOwner(T)= 0 then
      ToTerritory:= T;
    T:= T + 1;
  until (ToTerritory > 0) or (T > 42);
end;

function FinisherPlacement(var ToTerritory: integer): boolean;
var
  CID: Array of Integer;
  Abort: Boolean;
  TM: Double;
  MaxPArmiesCount, WeakestPMaxBArmies, WeakestPBArmies, HumanBArmies, HumanMaxBArmies, Priority,
  TotalArmies, TotalEnemyArmies, PT,PA,ET,EA, B, X, T, P, BT, BT1, B1, B2, Count,
  WeakestP, WeakestPA, MinPressure, MaxPressure, Pressure: integer;
  
begin

if PProgram(PMe) = 'finisher.trp' then UBufferSet(100, 1);

if (UBufferGet(100) = 1) and (not (PProgram(PMe) = 'finisher.trp')) then begin

  TM:=1.0;	// #*# Threshold Multiplier, increase this number in the tenth's place if Finisher isn't successful often enough

  Abort:=False;
  TotalEnemyArmies:=0;
  MaxPArmiesCount:=0;	// The number of armies that my strongest enemy has
  for P:= 1 to 10 do begin
    If (PAlive(P)) and (P<>PMe) then begin
      If PArmiesCount(P) >= MaxPArmiesCount then begin
        If (NOT (PArmiesCount(P) = MaxPArmiesCount)) then Abort:=False;	// Only Abort if strongest enemy has > 3 cards
        MaxPArmiesCount:= PArmiesCount(P);
        If (PCardCount(P) > 3) and (PCardTurnInValue(P) > 25) then Abort:= True;
      end;
      If PHuman(P) and (PCardCount(P) > 3) and (PCardTurnInValue(P) > 20) then Abort:= True;
      If PHuman(P) then TM:= TM + 0.1;
      If PCardCount(P) > 2 then TM:= TM + (double(PCardTurnInValue(P))/200);	// decrease the denominator's value if you want to play more conservatively
      TotalEnemyArmies:=TotalEnemyArmies + PArmiesCount(p);
    end;
  end;

  { if I have a lot of cards or a lot of armies then lower the threshold multiplier }
  if (PCardCount(PMe) > 2) and (SAlivePlayersCount > 4) and (PCardTurnInValue(P) > 20)
  then TM:= TM - (double(PCardTurnInValue(PMe))/80)
  else if (PCardCount(PMe) > 3) and (SAlivePlayersCount > 3) and (PCardTurnInValue(P) > 20)
  then TM:= TM - (double(PCardTurnInValue(PMe))/100);

  { if I have a lot of armies then lower TM because on average when attacking 3 dice against 2
    I'll take out 7 enemy armies for every 6 I lose, so I need less armies to win }
  if (PArmiesCount(PMe) + PNewArmies(PMe) > 200) and (PArmiesCount(PMe) + PNewArmies(PMe) < 1000)
  then TM:= TM - double(PArmiesCount(PMe) + PNewArmies(PMe))/2000;

  if (PArmiesCount(PMe) + PNewArmies(PMe) < trunc(TotalEnemyArmies * TM)) or Abort then begin
    UBufferSet(100, 0);
    result:=false;
//    UMessage('end Finisher');
  end;
end;

if (UBufferGet(100) = 1) then begin
  result:= true;
  
  { find the weakest player }
  WeakestPA:=99999;
  WeakestP:=0; // weakest player
  for P:= 1 to 10 do begin
    If (PAlive(P)) and (P<>PMe) then begin
      If PArmiesCount(P) < WeakestPA then begin
        WeakestP:=P;
        WeakestPA:=PArmiesCount(P);
      end;
    end;
  end;

  Priority:= 0;
  MaxPressure:= -100000;
  WeakestPMaxBArmies:= 0;   // weakest player max armies bordering T
  HumanMaxBArmies:= 0;      // human    "      "
  SetArrayLength(CID, 10);	// CID = check if duplicate
  Repeat
    Priority:= Priority + 1;
    MinPressure:=999999;
    for T:=1 to 42 do begin
      WeakestPBArmies:= 0;  // WeakestP's armies on bordering territory ET
      HumanBArmies:= 0;
      for X:= 0 to 9 do CID[X]:= 0;
      if TIsFront(T) then begin
        pressure:= TPressure(T);
        for B:= 1 to TBordersCount(T) do begin
          ET:= TBorder(T, B);
          if Not TIsMine(ET) then begin
            if TOwner(ET) = WeakestP then WeakestPBArmies:= WeakestPMaxBArmies + TArmies(ET);
            if PHuman(TOwner(ET)) then HumanBArmies:= HumanMaxBArmies + TArmies(ET);

            for B1:= 1 to TBordersCount(ET) do begin
              BT:=TBorder(ET, B1);
              If TIsMine(BT) and (TArmies(BT) > 1) and (BT <> T) and (TArmies(BT) < TArmies(ET)+ 1)
              and (Not ( (TArmies(BT) < 4) and (TArmies(ET) > 1) ))
              then begin
                Pressure:= Pressure - TArmies(BT) + 3;
                if PHuman(TOwner(ET)) then HumanMaxBArmies:= HumanMaxBArmies - TArmies(BT);
                if TOwner(ET) = WeakestP then WeakestPBArmies:= WeakestPBArmies - TArmies(BT);
              end;
              If TIsMine(BT) and (TArmies(BT) > 1) and (BT <> T) and (TArmies(BT) > TArmies(ET))
              then begin
                Pressure:= Pressure - TArmies(ET);
                if PHuman(TOwner(ET)) then HumanMaxBArmies:= HumanMaxBArmies - TArmies(ET);
                if TOwner(ET) = WeakestP then WeakestPBArmies:= WeakestPBArmies - TArmies(ET);
              end;

              Count:=0;
              if (TBordersCount(BT) = TFrontsCount(BT)) and (Not TIsMine(BT)) then begin
                For X:= 0 to 9 do if CID[X] = BT then Count:=Count + 1;
                if count = 0 then begin;
                  Pressure:= Pressure + TArmies(BT) + 1;
                  if TOwner(BT) = WeakestP then WeakestPBArmies:= WeakestPBArmies + TArmies(BT) + 1;
                  if PHuman(TOwner(BT)) then HumanBArmies:= HumanBArmies + TArmies(BT) + 1;
                  For X:= 0 to 9 do begin
                    if CID[X] = 0 then begin
                      CID[X]:= BT;
                      X:=9;
                    end;
                  end;
                end;
                For B2:= 1 to TBordersCount(BT) do begin
                  Count:=0;
                  BT1:= TBorder(BT, B2);
                  If (Not TIsMine(BT1)) and (TBordersCount(BT1) = TFrontsCount(BT1)) and (BT1 <> ET)
                  then begin
                    For X:= 0 to 9 do if CID[X] = BT1 then Count:=Count + 1;
                    If Count = 0 then begin
                      Pressure:= Pressure + TArmies(BT1) + 1;
                      if TOwner(BT1) = WeakestP then WeakestPBArmies:= WeakestPBArmies + TArmies(BT1) + 1;
                      if PHuman(TOwner(BT1)) then HumanBArmies:= HumanBArmies + TArmies(BT1) + 1;

                      For X:= 0 to 9 do begin
                        if CID[X] = 0 then begin
                          CID[X]:= BT1;
                          X:=9;
                        end;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;

        if (Pressure > 0) and (TArmies(T) < Pressure + 2)  // Priority 1: kill humans
        and (Priority = 1) and (HumanBArmies > HumanMaxBArmies) then begin	// place until I have 2 more than the pressure
          HumanMaxBArmies:= HumanBArmies;
          ToTerritory:= T;
        end;
        if (Pressure > 0) and (TArmies(T) < Pressure + 2)  // Priority 2: kill weakest player
        and (Priority = 2) and (WeakestPBArmies > WeakestPMaxBArmies) then begin	// place until I have 2 more than the pressure
          WeakestPMaxBArmies:= WeakestPBArmies;
          ToTerritory:= T;
        end;
        if (Pressure > MaxPressure) and (TArmies(T) < Pressure + 2)  // Priority 3: fortify T with greatest pressure
        and (Priority = 3) then begin	                               // place until I have 2 more than the pressure
          ToTerritory:= T;
          MaxPressure:= Pressure;
        end;

        if (Pressure > MaxPressure) and (TArmies(T) < Pressure + 4)  // Priority 4: fortify T with greatest pressure
        and (Priority = 4) then begin                                // place until I have 4 more than the pressure
          ToTerritory:= T;
          MinPressure:= Pressure;
        end;
        if (Pressure > MaxPressure) and (Priority >= 5) then begin    // Priority 5: fortify T with greatest pressure until I have no more armies
          ToTerritory:= T;
          MaxPressure:= Pressure;
        end;
      end;
    end;
  until (ToTerritory <> 0);

  { Make sure I have enough Armies to take Australia - this code will override the above code except
   when priority = 1 or 2 }
  if Not (Priority < 3) then begin
    if (Not (COwner(6) = PMe)) and ( (   TIsMine(31) or (  ( TIsMine(30) or TIsMine(32) ) and (Not TIsMine(31))  )   ) or
    TIsMine(39) or TIsMine(40) or TIsMine(41) or TIsMine(42) ) then begin
      CAnalysis(6, PT,PA,ET,EA);
      TotalArmies:=0;
      If TIsMine(31) and (Not TIsMine(39)) then TotalArmies:= TArmies(31);
      For T:= 39 to 42 do if TIsMine(T) then TotalArmies:=TotalArmies + TArmies(T);

      If TotalArmies - PT < EA + 4 then begin
        ToTerritory:= 0;
        if TIsMine(42) then ToTerritory:=42;
        if TIsMine(41) then ToTerritory:=41;
        if TIsMine(40) then ToTerritory:=40;
        if (ToTerritory = 0) and TIsMine(39) then ToTerritory:=39;
        if (ToTerritory = 0) and TIsMine(31) then ToTerritory:=31;
        if (ToTerritory = 0) and TIsMine(32) then ToTerritory:=32;
        if (ToTerritory = 0) and TIsMine(30) then ToTerritory:=30;
        if ((ToTerritory = 30) or (ToTerritory = 32)) and TIsMine(30) and TIsMine(32) then
          if TArmies(32) > TArmies(30) then ToTerritory:=32;
      end;
      
    end;
  end;
  
end else result:= false;
end;

function FinisherAttack(var FromTerritory, ToTerritory: integer): boolean;
var
  B, T, B1, T1, FT, TT, TF, SkipF, SkipT, SkipT1, SkipF1, SkipT2, SkipF2,
  MinArmy, BIB, ChangeCheck, MyLargestArmy, PT,PA,ET,EA : integer;
  ResetSU, SkipUkraine, SkipOverrides: boolean;

begin

if PProgram(PMe) = 'finisher.trp' then UBufferSet(100, 1);

if UBufferGet(100) = 1 then begin
  result:= true;
  
  { If a territory only has one front then attack with this territory first until my armies = 3 or enemy armies < 3.
  Don't conquer the territory because the code below will determine that. This code just makes sure that not too
  many armies get blocked in. }
  FromTerritory:=0;
  ToTerritory:=0;
  MinArmy:=99999;
  For T:= 1 to 42 do begin
    iF TIsMine(T) and (TFrontsCount(T) = 1) and (TArmies(T) < MinArmy)
    and (TArmies(TFront(T,1)) > 2) and (TArmies(T) > 3) then begin
      FromTerritory:= T; FT:=7;
      ToTerritory:= TFront(T,1); TT:=7;
      MinArmy:= TArmies(T);  // get rid of my smallest armies first
    end;
  end;

  if FromTerritory = 0 then begin
    if (COwner(5) = PMe) then SkipUkraine:=false else SkipUkraine:= true;
    SkipOverrides:= False;
    ResetSU:= False;
    FT:=0;		TT:=0;
    SkipT:=0;		SkipF:=0;	//SkipT = Skip ToTerritory, SkipF = Skip FromTerritory
    SkipT1:=0;	SkipF1:=0;
    SkipT2:=0;	SkipF2:=0;
    MyLargestArmy:=0;
    for T:=1 to 43 do begin
      if (T = 22) and SkipUkraine then T:=23;
      if (T = 26) and SkipUkraine then T:=27;  // SkipUkraine is also for skipping Southern Europe
      if TIsMine(T) and TIsFront(T) and (TArmies(T) > 1) then begin		// must have at least 2 armies to perform an attack

        { Find my T with the largest Army and attack the bordering territory with the highest territory number }
        For B:=1 to TFrontsCount(T) do begin
          TF:= TFront(T,B);  // TF = Territory Front
          if (TArmies(T) >= MyLargestArmy) and (NOT ( (TF = SkipT) and (T = SkipF) ))	// don't attack the territory SkipT
          and (NOT ( (TF = SkipT1) and (T = SkipF1) ))						// if T is the territory SkipF
          and (NOT ( (TF = SkipT2) and (T = SkipF2) ))
          and ( NOT ((TArmies(T) < 4) and (TArmies(TF) > 1)) ) then begin		         // don't attack with 1 or 2 armies against 2 or more
            if (  (TF >= ToTerritory) or ( (T = 37) and (B = 1) )  ) and 	           // find the front with the highest
              (  Not ( (TContinent(T) = 3) and (TContinent(TF) = 3) )  ) then begin  // territory number if the continent
              FromTerritory:=T;	FT:=1;							                                 // is not Europe
              ToTerritory:=TF; TT:=1;
              MyLargestArmy:=TArmies(T);
            end;
            if ( (TContinent(T) = 3) and (TContinent(TF) = 3) ) then begin
              if ToTerritory = 0 then ToTerritory:=99;
              if (TF < ToTerritory) then begin   // in Europe find the front with the lowest territory number
                FromTerritory:=T;   FT:=2;   // FT and TT are used for debugging to determine which part of the code
                ToTerritory:=TF;   TT:=2;    // determined the FromTerritory and the ToTerritory
                MyLargestArmy:=TArmies(T);
              end;
            end;

            { this code will override the above code. If a territory is surrounded by me then I will
             attack it first, starting with my bordering territory with the fewest armies. }
            if TFrontsCount(TF) = 0 then begin  // TFrontsCount(TF) is 0 when I am surrounding it
              FromTerritory:= T;
              MinArmy:= TArmies(T);
              For B1:= 1 to TBordersCount(TF) do begin // check to see if I can attack from a border that has fewer armies.
                BIB:= TBorder(TF, B1);   // BIB = Blocked in Border
                if (TFrontsCount(BIB) = 1) and (NOT ( (TArmies(BIB) < 4) and (TArmies(TF) > 1) ))
                and (NOT (TArmies(BIB) = 1)) and (TArmies(BIB) < MinArmy) then begin
                  FromTerritory:= BIB; FT:=3;
                  MinArmy:= TArmies(BIB);
                end;
              end;
              ToTerritory:=TF; TT:=3;
              B:= TFrontsCount(T);	// ends the loop "For B:=1 to TFrontsCount(T)"
              T:= 43;			          // ends the loop "for T:=1 to 43"
              SkipOverrides:=True;	// need to end the loops so that TFront(T,B) doesn't change
            end;

          end;  // ends "TArmies(T) >= MyLargestArmy"
        end;  // ends "For B:=1 to TFrontsCount(T)"

        { Course correction that needs to check for Skips, must be placed before the block in check so the ToTerritory is right }
        if (FromTerritory = 27) and (COwner(5) = PMe) and (Not TIsMine(22)) and (Not TIsMine(26))
        and (NOT ( (SkipT=22) and (SkipF=27) ))
        and (NOT ( (SkipT1=22) and (SkipF1=27) ))
        and (NOT ( (SkipT2=22) and (SkipF2=27) ))
        and (NOT ( (TArmies(27) < 4) and (TArmies(22) > 1) )) then begin ToTerritory:=22; TT:=4; end;

        { Don't attack a territory if it blocks in my armies on another territory
          only check if the FromTerritory can attack elsewhere }
        If (T = FromTerritory) and (TFrontsCount(FromTerritory) > 1)
        and ( (SkipT = 0) or (SkipT1 = 0) or (SkipT2 = 0) ) then begin
          For T1:= 1 to TBordersCount(ToTerritory) do begin
            BIB:= TBorder(ToTerritory,T1);		// BIB = Blocked in Border
            If TIsFront(BIB) and (BIB <> FromTerritory)
            and (TArmies(BIB) >= TArmies(ToTerritory) + 2) and (TFrontsCount(BIB) = 1) then begin
              If SkipT1 <> 0 then begin
                SkipT2:=ToTerritory;
                SkipF2:=FromTerritory;
              end;
              If SkipT <> 0 then begin
                SkipT1:=ToTerritory;
                SkipF1:=FromTerritory;
              end else begin
                SkipT:=ToTerritory;
                SkipF:=FromTerritory;
              end;
              If (BIB = 22) or (BIB = 26) then SkipUkraine:=False;
              T:=0;		// restart the loop: For T:= 1 to 43 this time skipping these territories
              MyLargestArmy:=0;
              FromTerritory:=0;
              ToTerritory:=0;
              SkipOverrides:=False;
            end;
          end;
        end;

      end;  // end if TIsMine

      { Rules for Ukraine and Southern Europe }
      if (T = 42) and ( (TArmies(FromTerritory) < 5) or (FromTerritory = 0) ) and ( TIsMine(22) or TIsMine(26) ) and (NOT SkipOverrides)
      and SkipUkraine then ResetSU:= True;

      if (T = 42) and ((FromTerritory = 15) or (FromTerritory = 16))
      and (ToTerritory = 27) and (TArmies(FromTerritory) < TArmies(26))
      and SkipUkraine and (COwner(3) = PMe) then ResetSU:= True;

      CAnalysis(3, PT,PA,ET,EA);
      if (T = 42) and ((FromTerritory = 15) or (FromTerritory = 16)) and (ToTerritory = 27)
      and ( TArmies(FromTerritory) < TArmies(26)-(ET+EA+PT - (PA-TArmies(26))) ) and (ET+EA+PT - (PA-TArmies(26)) >= 0)
      and SkipUkraine then ResetSU:= True;

      if ResetSU and SkipUkraine then begin
        SkipUkraine:= False;	MyLargestArmy:=0;
        FromTerritory:=0;		ToTerritory:=0;
        SkipOverrides:=False;	T:= 0;
        ResetSU:=False;
      end;
    if T = 42 then T:=43;
    end;  // end for T:=1 to 43

    { Override the above calculation if ToTerritory is in South America }
    if (TContinent(FromTerritory) = 2) and (TContinent(ToTerritory) = 2) then begin
      if (FromTerritory = 10) and (NOT TIsmine(11)) then ToTerritory:= 11;
      if (FromTerritory = 12) and (NOT TIsmine(13)) then ToTerritory:= 13;
      if (FromTerritory = 12) and TIsmine(13) and (NOT TIsMine(11)) then ToTerritory:= 11;
      if (FromTerritory = 11) and (NOT TIsmine(13)) then ToTerritory:= 13;
      if (FromTerritory = 11) and TIsmine(13) and (NOT TIsMine(12)) then ToTerritory:= 12;
      TT:=5;
    end;

    { Course corrections }
    if NOT SkipOverrides then begin
      ChangeCheck:= ToTerritory;

      CAnalysis(4 ,PT,PA,ET,EA);
      if (FromTerritory = 27) and (COwner(5) = PMe) and (Not TIsMine(16)) and (PA - PT < EA + ET + 2)
      and (NOT ( (TArmies(27) < 4) and (TArmies(16) > 1) )) then ToTerritory:= 16;	// make sure not to attack with 1 army against 2 or more

      if (FromTerritory = 16) and (Not TIsMine(15)) and (PT = 5)
      and (NOT ( (TArmies(16) < 4) and (TArmies(15) > 1) )) then ToTerritory:=15;

      if (FromTerritory = 15) and (Not TIsMine(26))
      and (NOT ( (TArmies(15) < 4) and (TArmies(26) > 1) )) then ToTerritory:=26;

      if (FromTerritory = 16) and (ToTerritory = 19) and TIsMine(17) and (Not TIsMine(18)) and (TArmies(17) > 1)
      and (NOT ( (TArmies(17) < 4)and (TArmies(18) > 1) )) then begin
        ToTerritory:= 18;
        FromTerritory:= 17;  FT:=17;
      end;
      if (FromTerritory = 34) and (NOT TIsMine(35))
      and (NOT ( (TArmies(34) < 4)and (TArmies(35) > 1) )) then ToTerritory:= 35;
      if (FromTerritory = 35) and (NOT TIsMine(36))
      and (NOT ( (TArmies(35) < 4) and (TArmies(36) > 1) )) then ToTerritory:= 36;
      if (Fromterritory = 14) and (Not TIsMine(17))
      and (NOT ( (TArmies(14) < 4) and (TArmies(17) > 1) )) then ToTerritory:= 17;

      if (FromTerritory = 14) and (Not TIsMine(12))
      and (NOT ( (TArmies(14) < 4) and (TArmies(12) > 1) )) then ToTerritory:=12;
      // NA
      if (FromTerritory = 8) and (Not TIsMine(6))
      and (NOT ( (TArmies(8) < 4) and (TArmies(6) > 1) )) then ToTerritory:=6;
      if (FromTerritory = 4) and (Not TIsMine(1))
      and (NOT ( (TArmies(4) < 4) and (TArmies(1) > 1) )) then ToTerritory:=1;
      if (FromTerritory = 1) and (Not TIsMine(2))
      and (NOT ( (TArmies(1) < 4) and (TArmies(2) > 1) )) then ToTerritory:=2;
      if (FromTerritory = 2) and (Not TIsMine(4))
      and (NOT ( (TArmies(2) < 4) and (TArmies(4) > 1) )) then ToTerritory:=4;

      if (FromTerritory = 32) and (Not TIsMine(31))
      and (NOT ( (TArmies(32) < 4) and (TArmies(31) > 1) )) then ToTerritory:=31;

      if TIsMine(22) and TIsBordering(ToTerritory, 22) and (TFrontsCount(22) = 1)
      and (TArmies(22) > TArmies(FromTerritory)) then begin FromTerritory:= 22; FT:=4; end;
      if TIsMine(26) and TIsBordering(ToTerritory, 26) and (TFrontsCount(26) = 1)
      and (TArmies(26) > TArmies(FromTerritory)) then begin FromTerritory:= 26; FT:=5; end;

      if TIsMine(37) and TIsBordering(ToTerritory, 37) and (TFrontsCount(37) = 1)
      and (TArmies(37) > TArmies(FromTerritory)) then begin FromTerritory:= 37; FT:=6; end;

      if (FromTerritory = 37) and (ToTerritory = 35) and (Not TIsMine(1))
      and (NOT ( (TArmies(37) < 4) and (TArmies(1) > 1) )) then ToTerritory:= 1;	// don't want armies getting trapped in Asia

      if (FromTerritory = 22) and (Not TIsMine(28))
      and (NOT ( (TArmies(22) < 4) and (TArmies(28) > 1) )) then begin
        CAnalysis(5, PT,PA,ET,EA);
        If (PA < PT + 3) or (PA - PT < ET + EA) then ToTerritory:= 28;
      end;

      if (FromTerritory = 22) and (Not TIsMine(29))
      and (NOT ( (TArmies(22) < 4) and (TArmies(29) > 1) )) then begin
        CAnalysis(5, PT,PA,ET,EA);
        If (PA < PT + 3) or (PA -PT < ET + EA) then ToTerritory:= 29;	// If there aren't any armies left in Asia to battle
      end;											                                      // with then battle Asia from Ukraine
      if ChangeCheck <> ToTerritory then TT:=6;
    end;  // end course corrections
  end; // end "if FromTerritory = 0"

end else result:= false; // end "if UBufferGet(100) = 1"
end;

function FinisherOccupation(FromTerritory, ToTerritory: integer; Var Armies: integer): boolean;
var
  PT,PA,ET,EA, PT1,PA1,ET1,EA1, PT2,PA2,ET2,EA2: integer;
  FT, TT, T, MyBorderingArmies, Count, B: integer;

begin
  if PProgram(PMe) = 'finisher.trp' then UBufferSet(100, 1);

  if UBufferGet(100) = 1 then begin
    result:= true;
    Armies:= TArmies(FromTerritory) - 1;

    { Don't get all your armies stuck in South Africa or Madagascar }
    if (FromTerritory = 16) and (ToTerritory = 19) and TIsMine(17) and (NOT TIsMine(18)) then Armies:= TArmies(18);
    if (FromTerritory = 17) and (ToTerritory = 18) and TIsMine(16) and (NOT TIsMine(19)) then Armies:= TArmies(19);
    if (FromTerritory = 27) and (ToTerritory = 16) and TIsMine(14) then begin
      Armies:=0;
      For T:= 17 to 19 do if Not TIsMine(T) then Armies:= Armies + TArmies(T);
      Armies:= Armies - TArmies(14) + 1;
    end;

    { For greenland spilt the armies between what NA needs and what Europe needs }
    CAnalysis(3, PT,PA,ET,EA);
    CAnalysis(1, PT1,PA1,ET1,EA1);
    if (FromTerritory = 20) and (ToTerritory = 3) and (Not (COwner(3) = PMe)) then begin
      if ((EA1+ET1-PA1+PT1) > 0) and ((EA+ET+PT)-(PA-TArmies(FromTerritory)) > 0)
      then Armies:= round(   Armies * (  (double(EA1)+ET1-PA1+PT1) /
                         ( (EA1+ET1-PA1+PT1) + ((EA+ET+PT)-(PA-TArmies(FromTerritory))) )  )   );
    end;

    { If I have enough armies to take Asia but NA needs help then leave some armies behind }
    if (FromTerritory = 37) and (ToTerritory = 36) and (PA - PT > ET + EA) and (PA1 - PT1 < EA1 + ET1)
    and (Not TIsMine(1)) then begin
      Armies:= ET + EA;
    end;

    { Split armies in Ukraine and Southern Europe between Europe and Asia }
    if (FromTerritory = 22) or (FromTerritory = 26) then begin
      CAnalysis(3, PT,PA,ET,EA);
      CAnalysis(5, PT1,PA1,ET1,EA1);
      CAnalysis(6, PT2,PA2,ET2,EA2);

      if (ToTerritory > 26) and ((EA1+ET1-PA1+PT1) + (EA2-PA2+PT2+ET2) > 0) and ((EA+ET+PT)-(PA-TArmies(FromTerritory)) > 0)
      then begin
        Armies:= round(   Armies * (  ((double(EA1)+ET1-PA1+PT1) + (EA2-PA2+PT2+ET2))/
                    ( (EA1+ET1-PA1+PT1) + (EA2-PA2+PT2+ET2) + ((EA+ET+PT)-(PA-TArmies(FromTerritory))) )  )   );
      end;

      if (ToTerritory > 26) and ((EA1+ET1-PA1+PT1) + (EA2+ET2-PA2+PT2) > 0) and ((EA+ET+PT)-(PA-TArmies(FromTerritory)) <= 0)
      then begin
        Armies:=TArmies(FromTerritory)-1;
      end;

      if (ToTerritory < 27) and ((EA1+ET1-PA1+PT1) + (EA2+ET2-PA2+PT2) > 0) and ( (EA+ET+PT)-(PA-TArmies(FromTerritory)) > 0 )
      then begin
        Armies:= round(   Armies * (  (double(EA)+ET+PT-(PA-TArmies(FromTerritory)))/
                        ( (EA1+ET1-PA1+PT1) + (EA+ET+PT-(PA-TArmies(FromTerritory))) + (EA2+ET2-PA2+PT2) )  )   );
      end;

      if (ToTerritory < 27) and ( (EA1+ET1-PA1+PT1) + (EA2+ET2-PA2+PT2) <= 0 ) and (EA+ET-PA+PT > 0) then begin
        Armies:=TArmies(FromTerritory)-1;
      end;
    end;

    { Only send in enough armies to Australia to conquer it unless Australia is all that is left }
    CAnalysis(6, PT,PA,ET,EA);
    If (FromTerritory = 31) and (ToTerritory = 39) and (PTerritoriesCount(PMe) < 39)
    then Armies:= ET + EA;
    If (FromTerritory = 32) and (ToTerritory = 31) and (PTerritoriesCount(PMe) < 38)
    then Armies:= ET + EA + 1;
    If (FromTerritory = 30) and (ToTerritory = 31) and (PTerritoriesCount(PMe) < 38)
    then Armies:= ET + EA + 1;

    { Check to see how many armies to send into SA }
    if (FromTerritory = 14) and (ToTerritory = 12) then begin
      CAnalysis(2, PT,PA,ET,EA);
      if TIsMine(9) and ( (Not TIsMine(8)) or (Not TIsMine(7)) ) then begin
        Armies:=0;
        For T:= 7 to 8 do If Not TIsMine(T) then Armies:=Armies + TArmies(T);
        Armies:= Armies + (ET+EA)-(PA-PT);
      end;
      if TIsMine(9) and TIsMine(8) and TIsMine(7) then Armies:= PA-PT+ET+EA;
    end;
    if (FromTerritory = 9) and (ToTerritory = 10) then begin
      CAnalysis(2, PT,PA,ET,EA);
      if TIsMine(14) then Armies:= (ET+EA)-(PA-PT);
    end;

    if (TFrontsCount(ToTerritory) = 0) then Armies:=0;

    { Only send armies to a dead end with enough armies to take out the end territory }
    TStrongestFront(ToTerritory, ET, EA);
    if (TFrontsCount(FromTerritory) > 0) and (TFrontsCount(ToTerritory) = 1) and (TFrontsCount(ET) = 0)
    and (Not (TIsBordering(FromTerritory, ET))) then begin
      For B:= 1 to TBordersCount(ET) do MyBorderingArmies:= MyBorderingArmies + TArmies(TBorder(ET, B))-1;
      If MyBorderingArmies < EA + 2 then Armies:= EA - MyBorderingArmies + 2 else Armies:=0;
    end;

    { If both territories are blocked in then determine which T is closer to a front }
    if (TFrontsCount(ToTerritory) = 0) and (TFrontsCount(FromTerritory) = 0) then begin
      count:= 0;
      TT:= ToTerritory;
      FT:= FromTerritory;
      repeat
        Count:= Count + 1;
        TT:= TPathToFront(TT);
        FT:= TPathToFront(FT);
      until TIsFront(FT) or TIsFront(TT) or (Count = 14);
      if TIsFront(FT) and (Not TIsFront(TT)) then Armies:= 0 else Armies:=TArmies(FromTerritory)-1;
    end;

    if Armies > TArmies(FromTerritory)-1 then Armies:=TArmies(FromTerritory)-1;
  end else result:= false;
end;

function FinisherFortification(var FromTerritory, ToTerritory, Armies: integer): boolean;
var
  TargetT, MaxArmy, MaxArmy1, MaxPressure, SkipT, SkipT1, SkipT2, X, B1, T1, PL,
  B, T, TotalEnemyArmies, P, MaxPArmiesCount: integer;
  Abort: boolean;
  TM: double;
  
begin
  if PProgram(PMe) = 'finisher.trp' then UBufferSet(100, 1);

  { Check to see if I have enough armies to switch to Finisher }
  if UBufferGet(100) = 0 then begin

    TM:=1.0;	// #*# Threshold Multiplier, increase this number in the tenth's place if Finisher isn't successful often enough
    Abort:=False;
    TotalEnemyArmies:=0;
    MaxPArmiesCount:=0;	// The number of armies that my strongest enemy has
    for P:= 1 to 10 do begin
      if (PAlive(P)) and (P<>PMe) then begin
        if PArmiesCount(P) >= MaxPArmiesCount then begin
          if (NOT (PArmiesCount(P) = MaxPArmiesCount)) then Abort:=False;	// Only Abort if strongest enemy has > 2 cards
          MaxPArmiesCount:= PArmiesCount(P);
          if (PCardCount(P) > 2) and (PCardTurnInValue(P) > 25) then Abort:= True;
        end;
        if PHuman(P) and (PCardCount(P) > 2) and (PCardTurnInValue(P) > 20) then Abort:= True;
        if PHuman(P) then TM:= TM + 0.1;
        if PCardCount(P) > 2 then TM:= TM + (double(PCardTurnInValue(P))/200);	// decrease the denominator's value if you want to play more conservatively
        TotalEnemyArmies:=TotalEnemyArmies + PArmiesCount(p);
      end;
    end;

    { if I have a lot of cards or a lot of armies then lower the threshold multiplier }
    if (PCardCount(PMe) > 2) and (SAlivePlayersCount > 4) and (PCardTurnInValue(P) > 20)
    then TM:= TM - (double(PCardTurnInValue(PMe))/80)
    else if (PCardCount(PMe) > 3) and (SAlivePlayersCount > 3) and (PCardTurnInValue(P) > 20)
    then TM:= TM - (double(PCardTurnInValue(PMe))/100);

    { if I have a lot of armies then lower TM because on average when attacking 3 dice against 2
      I'll take out 7 enemy armies for every 6 I lose, so I need less armies to win }
    if (PArmiesCount(PMe) > 200) and (PArmiesCount(PMe) < 1000) then TM:= TM - double(PArmiesCount(PMe))/2000;

    if (UBufferGet(100) <> 1) then begin
      if (PArmiesCount(PMe) > trunc(TotalEnemyArmies * TM)) and (NOT Abort) then UBufferSet(100, 1);
      if (PArmiesCount(PMe) > trunc(TotalEnemyArmies*1.4)) then UBufferSet(100, 1);		// If TM > 1.4 then switch to Finisher even if Abort = true
    end;
  end;

if UBufferGet(100) = 1 then begin
  result:= true;

  { Find the largest army that can be moved to a front within one or two fortifications
    priority is given to an army that can be moved to a front in one move }
  SkipT:=0;		// these variables are used to skip territories whose armies can't be moved to a front in 2 moves
  SkipT1:=0;	// and when those armies are equal to the armies on another blocked in territory
  SkipT2:=0;
  MaxArmy1:= 99999;
  X:= 0;
  Repeat
    X:= X + 1
    
    { Find the largest army that is blocked in }
    MaxArmy:=0;
    for T:= 1 to 42 do begin
      if (SkipT=T) or (SkipT1=T) or (SkipT2=T) then T:= T + 1;
      if TIsMine(T) and (not TIsFront(T)) then begin
	      if (TArmies(T) > MaxArmy) and (TArmies(T) > 1) and (TArmies(T) <= MaxArmy1) then begin
	        FromTerritory:= T;
	        MaxArmy:= TArmies(T);
	      end;
      end;
    end;

    { Move the army to FromTerritory's border with the greatest pressure }
    MaxPressure:=0;
    for B:= 1 to (TBordersCount(FromTerritory)) do begin
      T:=TBorder(FromTerritory, B);
      if TIsFront(T) then begin
        if TPressure(T) > MaxPressure then begin
	        ToTerritory:= T;
	        MaxPressure:=TPressure(T);
	      end;
      end;
    end;

    { If T has no borders that are front then check T's border's borders for a front }
    if ToTerritory=0 then begin
      for B:= 1 to (TBordersCount(FromTerritory)) do begin
        T:=TBorder(FromTerritory, B);
        if (TIsMine(T) and (not TIsFront(T))) then begin	// the not TIsFront part probably isn't necessary
          for B1:= 1 to (TBordersCount(T)) do begin
            T1:=TBorder(T, B1);
            if TIsFront(T1) then ToTerritory:= T;
          end;
        end;
      end;
    end;

    { If we still haven't found a ToTerritory then Skip FromTerritory in the next go through the loop }
    if ToTerritory=0 then begin
      if MaxArmy=MaxArmy1 then begin
        if (SkipT1>0) then SkipT2:= FromTerritory;	// If SkipT1 is already used then use SkipT2
        if (SkipT>0) and (SkipT1 = 0) then SkipT1:= FromTerritory;	// If SkipT is already used then use SkipT1
	  if SkipT = 0 then SkipT:=FromTerritory;
      end;
      MaxArmy1:= MaxArmy;
    end;
    if ToTerritory <> 0 then Armies:= TArmies(FromTerritory)-1;
  Until (ToTerritory <> 0) or (X > 6);  // try 7 times to find a suitable fortification

  { if the above code failed to find a fortification then find the largest blocked in army and move it toward
    the largest enemy army }
  if ToTerritory = 0 then begin
    MaxArmy:=0;
    for T:= 1 to 42 do begin   // Find my largest army
      if TIsMine(T) and (not TIsFront(T)) then begin
	      if (TArmies(T) > MaxArmy) and (TArmies(T) > 1) then begin
	        FromTerritory:= T;
	        MaxArmy:= TArmies(T);
	      end;
      end;
    end;

    MaxArmy:=0;
    for T:= 1 to 42 do begin    // Find the largest enemy army
      if (not TIsMine(T)) and (TArmies(T) > MaxArmy) then begin
        TargetT:= T;
        MaxArmy:= TArmies(T);
      end;
    end;

    TShortestPath(FromTerritory, TargetT, ToTerritory, PL);
    Armies:= TArmies(FromTerritory) - 1;
  end;
end else result:= false; // ends "if UBufferGet(100) = 1"

end;

procedure Assignment(var ToTerritory: integer);
// var
begin
  if PProgram(PMe) = 'finisher.trp' then FinisherAssignment(ToTerritory) else begin
    // paste your code here
    
  end; // end "if PProgram(PMe) = ..."
end; // end procedure Assignment

procedure Placement(var ToTerritory: integer);
// var
begin
  if not FinisherPlacement(ToTerritory) then begin
    // paste your code here
    
  end; // end "if not FinisherPlacement..."
end; // end procedure Placement

procedure Attack(var FromTerritory, ToTerritory: integer);
// var
begin
  if not FinisherAttack(FromTerritory, ToTerritory) then begin
    // paste your code here
    
  end; // end "if not FinisherAttack..."
end; // end procedure Attack

procedure Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
//var
begin
  if not FinisherOccupation(FromTerritory, ToTerritory, Armies) then begin
    // paste your code here
    
  end; // end "if not FinisherOccupation..."
end; // end procedure Occupation

procedure Fortification(var FromTerritory, ToTerritory, Armies: integer);
// var
begin
  if not FinisherFortification(FromTerritory, ToTerritory, Armies) then begin
    // paste your code here
    
  end; // end "if not FinisherFortification..."
end; // end procedure Fortification

begin
end.