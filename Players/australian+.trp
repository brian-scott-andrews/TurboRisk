{ 
Program: Australian+

Author: Nathan Scarbrough
Email: Nathan.Scarbrough@gmail.com
Credit to Anthony Covey-Crump for the original Australian

Description: This program is the same as Australian except I added Vexer's kill player code so that Australian would be able to recognize when human players are weak and be able to target and destroy them.
The kill player code also helps Australian end the game more quickly and efficiently when he's winning.

Australian+ plays best with Card Turn In Value based on combination or a more gradual progression than +5 each trade, e.g. +1 each trade.
Take a look at Australian.trp's description for more details.

History: Version 2.0 March 2010
}

{---------------------------------Kill Player Code---------------------------------------------------}
                                           // by Nathan Scarbrough (adapted from Vexer.trp)
                                           // uses UBuffers 52, 56, 61, 63, 73, 74, 98, 99



function bg(x: integer): integer;
begin result:= trunc(UBufferGet(x)); end;

procedure bs(x, y: integer);
begin UBufferSet(x, y); end;

function PTC: integer; begin result:= PTerritoriesCount(PMe); end;

Function GameHasNoHumans: boolean;
var
  P: integer;
begin
  result:= true;
  for P:= 1 to 10 do begin
    if PHuman(P) and PAlive(P) then result:= false;
  end;
end;

function GameHasOneHuman(var P: integer): boolean;
Var Human, C: integer;
Begin
  C:= 0;
  For P:= 1 to 10 do begin
    If PHuman(P) and PAlive(P)then begin
      C:= C + 1;
      Human:= P;
    end;
  end;
  if C = 1 then begin
    result:= true;
    P:= Human;
  end else begin
    result:= false;
    P:= 0;
  end;
end;

procedure ArmySort(var Army: array of integer);
var
  TC, x, x1, temp, T: integer;
begin
  TC:= PTerritoriesCount(Pme);
  SetArrayLength(Army, 43);
  For T:= 1 to 42 do Army[T]:= 0;
  x:= 0;
  For T:= 1 to 42 do begin
    if TIsMine(T) then begin
      x:= x + 1;
      Army[x]:= T;
    end;
  end;
  For x:= 1 to TC - 1 do begin
    For x1:= x + 1 to TC do begin
      if TArmies(Army[x1]) > TArmies(Army[x]) then begin
        temp:= Army[x];
        Army[x]:= Army[x1];
        Army[x1]:= temp;
      end;
    end;
  end;
end;

Function BestFT(TT: integer): integer;
var
  MaxArmy, B, BT: integer;
Begin
  Result:= 0;
  MaxArmy:= 0;
  For B:= 1 to TBordersCount(TT) do begin
    BT:= TBorder(TT, B);
    if TIsMine(BT) and (TArmies(BT) > MaxArmy) then begin
      MaxArmy:= TArmies(BT);
      Result:= BT;
    end;
  end;
end;

Function TsAreConnected(P, T, T1: integer): boolean;
Var
  X, BT, C, B: integer;
  TOwnerIsPlayerP, Checked: array of boolean;
begin
  SetArrayLength(Checked, 43);
  For x:= 1 to 42 do Checked[x]:= False;
  SetArrayLength(TOwnerIsPlayerP, 43);
  For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

  Result:= False;
  TOwnerIsPlayerP[T]:= True;
  if (  not ( TIsMine(T1) and TIsMine(T) )  ) and TIsBordering(T, T1) then Result:= True;
  Repeat
    if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
      C:= 0;
      For B:= 1 to TBordersCount(T) do begin
        BT:= TBorder(T, B);
        if ( (TOwner(BT) = P) or ((TOwner(BT) <> PMe) and (P = 0)) ) and (not TOwnerIsPlayerP[BT]) then begin
          C:= C + 1;
          TOwnerIsPlayerP[BT]:= True;
          if TIsBordering(BT, T1) then begin
            Result:= True;
            exit;
          end;
        end;
      end;
      Checked[T]:= True;
      if C > 0 then T:= 0;
    end;
    T:= T + 1;
  Until (T > 42);
end;

Procedure AddConnectedTsArmies(T: integer; var CTArmies, Ts: Integer);
Var
  P, X, BT, C, B: integer;
  TOwnerIsPlayerP, Checked: array of boolean;
begin
  SetArrayLength(Checked, 43);
  For x:= 1 to 42 do Checked[x]:= False;
  SetArrayLength(TOwnerIsPlayerP, 43);
  For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

  P:= TOwner(T);
  TOwnerIsPlayerP[T]:= True;
  CTArmies:= 0;
  Ts:= 0;
  Repeat
    if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
      C:= 0;
      For B:= 1 to TBordersCount(T) do begin
        BT:= TBorder(T, B);
        if (TOwner(BT) = P) and (not TOwnerIsPlayerP[BT]) then begin
          C:= C + 1;
          TOwnerIsPlayerP[BT]:= True;
        end;
      end;
      Checked[T]:= True;
      CTArmies:= CTArmies + TArmies(T);
      Ts:= Ts + 1;
      if C > 0 then T:= 0;
    end;
    T:= T + 1;
  Until (T > 42);
end;

procedure RankSort(var Rank: array of integer);
var
  temp, APC, x, x1, P: integer;
begin
  x:= 0;
  SetArrayLength(Rank, 11);
  For P:= 1 to 10 do Rank[P]:= 0;
  For P:= 1 to 10 do begin
    if (PArmiesCount(P) > 0) then begin
      x:= x + 1;
      Rank[x]:= P;
    end;
  end;
  APC:= SAlivePlayersCount;
  For x:= 1 to APC - 1 do begin
    For x1:= x + 1 to APC do begin
      if PArmiesCount(Rank[x1]) > PArmiesCount(Rank[x]) then begin
        temp:= Rank[x];
        Rank[x]:= Rank[x1];
        Rank[x1]:= temp;
      end;
    end;
  end;
end;

Procedure KillPAttack(P, FT: integer; var TT: integer);
Var
  Distance1, Distance2, C1, tempTT, Total2, ST, B1, Total, X, BT, C, B, T: integer;
  TOwnerIsPlayerP, Checked: array of boolean;
begin

  SetArrayLength(Checked, 43);
  SetArrayLength(TOwnerIsPlayerP, 43);

  TT:= 0;
  For B1:= 1 to TBordersCount(FT) do begin

    For x:= 1 to 42 do Checked[x]:= False;
    For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

    T:= TBorder(FT, B1);
    if (Not ((TArmies(FT) < 4) and (TArmies(T) > 1))) then begin
      if (  (TOwner(T) = P) or ( (P = 0) and (TOwner(T) <> PMe) )  ) then begin
        C:= 0;
        For B:= 1 to TBordersCount(T) do
         if (  (TOwner(TBorder(T, B)) = P) or ( (P = 0) and (TOwner(TBorder(T, B)) <> PMe) )  )
          then C:= C + 1;
        if (C = 0) and (TArmies(FT) > TArmies(T)) then begin
          TT:= T;
          exit;
        end;

        tempTT:= T;
        TOwnerIsPlayerP[T]:= True;
        Total:= 0;
        Repeat
          if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
            C:= 0;
            For B:= 1 to TBordersCount(T) do begin
              BT:= TBorder(T, B);
              if (  (TOwner(BT) = P) or ( (P = 0) and (TOwner(BT) <> PMe) )  )
               and (not TOwnerIsPlayerP[BT]) then begin
                C:= C + 1;
                TOwnerIsPlayerP[BT]:= True;
              end;
            end;
            Checked[T]:= True;
            Total:= Total + 1;
            ST:= T;
            if C > 0 then T:= 0;
          end;
          T:= T + 1;
        Until (T > 42);

        For x:= 1 to 42 do Checked[x]:= False;
        For x:= 1 to 42 do TOwnerIsPlayerP[x]:= False;

        T:= ST;
        TOwnerIsPlayerP[T]:= True;
        Total2:= 0;
        Repeat
          if TOwnerIsPlayerP[T] and (not Checked[T]) then begin
            C:= 0;
            For B:= 1 to TBordersCount(T) do begin
              BT:= TBorder(T, B);
              if (  (TOwner(BT) = P) or ( (P = 0) and (TOwner(BT) <> PMe) )  )
               and (not TOwnerIsPlayerP[BT]) and (not (BT = tempTT)) then begin
                C:= C + 1;
                TOwnerIsPlayerP[BT]:= True;
              end;
            end;
            Checked[T]:= True;
            Total2:= Total2 + 1;
            if C > 0 then T:= 0;
          end;
          T:= T + 1;
        Until (T > 42);

        if Total2 = Total - 1 then begin
          if TT = 0 then TT:= TempTT else begin
            C:= 0; C1:= 0;
            For B:= 1 to TBordersCount(TT) do
             if (TOwner(TBorder(TT, B)) = P) or ( (P = 0) and (TOwner(TBorder(TT, B)) <> PMe) ) then C:= C + 1;
            For B:= 1 to TBordersCount(TempTT) do
             if (TOwner(TBorder(TempTT, B)) = P) or ( (P = 0) and (TOwner(TBorder(TempTT, B)) <> PMe) ) then C1:= C1 + 1;
            if C1 < C then TT:= TempTT;
            If (C = 1) and (C1 = 1) and TIsBordering(TT, TempTT) then begin
              Distance1:= 0;
              Distance2:= 0;
              For T:= 1 to 42 do begin
                if (TOwner(T) <> Pme) and (not ((T = TT) or (T = TempTT)) ) then begin
                  if (TDistance(T, TT) < Distance1) or (Distance1 = 0) then Distance1:= TDistance(T, TT);
                  if (TDistance(T, TempTT) < Distance2) or (Distance2 = 0) then Distance2:= TDistance(T, TempTT);
                end;
              end;
              if Distance2 > Distance1 then TT:= TempTT;
            end;
          end;
        end;
      end;
    end;
  end;
end;

procedure KillPlayer_Placement(var ToTerritory: integer);
var
  BFT, Priority, aMinCost, P, WP, Extra2, Extra, BT1, Total, B, BT, Y, CTArmies, Ts,
  MyArmies, TT, PL, EA, Cost, T, minPressure, x: integer;

  MinCost, Rank, Army: array of integer;
  HasEnough: array of boolean;
  pathexists, go: boolean;
begin
  setarraylength(HasEnough, 43);
  setarraylength(MinCost, 43);

  ToTerritory:=0;
  ArmySort(Army);
  RankSort(Rank);

  if Rank[SAlivePlayersCount] <> PMe then WP:= Rank[SAlivePlayersCount] else WP:=0;
  if GameHasOneHuman(P) then WP:= P;
  bs(63, WP);


  if (bg(52) > 0) and (bg(56) > 0) then ToTerritory:= bg(52) else begin
    if SAlivePlayersCount > 2 then begin
      MyArmies:= 0;
      // need to take into account two non adjoining ts
      For T:= 1 to 42 do begin
        if (TOwner(T) = WP) and (TFrontsCount(T) = 0) then begin // Enemy T is surrounded by me
          For B:= 1 to TBordersCount(T) do begin
            BT:= TBorder(T, B);
            MyArmies:= MyArmies + TArmies(BT) - 1;
          end;
          BFT:= BestFT(T);
          if MyArmies < TPressure(BFT) + TFrontsCount(BFT) + 3 then begin
            ToTerritory:= BFT;
            exit;
          end;
        end;
      end;

      aMinCost:= 999999999;
      Priority:= 0;
      For x:= 1 to PTC do begin
        MinCost[Army[x]]:= 999999999;
        For T:= 1 to 42 do begin
         if TOwner(T) = WP then begin
           Cost:= 0;
           PathExists:= False;
           if TWeakestPath(Army[x], T, TT, PL, EA) then begin
             PathExists:= True;
             Cost:= PL + EA - TArmies(Army[x]);
             if (Cost < MinCost[Army[x]]) then MinCost[Army[x]]:= Cost;
           end;
         end;
        end;
        if PathExists then begin
          if MinCost[Army[x]] < aMinCost then begin
            aMinCost:= MinCost[Army[x]];
            Priority:= x;
          end;
        end;
      end;
      if priority > 0 then begin
        Cost:= aMinCost + TArmies(Army[Priority]);
        if TArmies(Army[Priority]) < Cost + PArmiesCount(WP) + PTerritoriesCount(WP) then begin
          ToTerritory:= Army[Priority];
          exit;
        end;
      end;
    end;

    bs(52, 0);
    Extra2:= bg(56);
    for x:= 1 to 42 do HasEnough[x]:= False;
    Repeat
      for Y:= 1 to PTC do begin
        If TIsFront(Army[y]) then begin
          Total:= 0;
          go:= True;
          if Y > 1 then for x:= Y-1 downto 1 do
           if HasEnough[Army[x]] then if TsAreConnected(0, Army[y], Army[x]) then go:= False;
          if go then begin
            Total:= 0;
            For B:= 1 to TFrontsCount(Army[y]) do begin
              BT:= TFront(Army[y], B);
              go:= True;
              if B > 1 then for x:= B-1 downto 1 do begin
                BT1:= TFront(Army[y], x);
                if TsAreConnected(0, BT, BT1) then go:= False;
              end;
              If go then begin
                AddConnectedTsArmies(BT, CTArmies, Ts);
                Total:= Total + CTArmies + Ts;
              end;
            end;
            Extra:= Ts div 3;
            if Extra < 2 then Extra:= 2;
            if TArmies(Army[y]) < Total + Extra + Extra2 then begin
              If ToTerritory = 0 then begin
                ToTerritory:= Army[y];
                minPressure:= TPressure(Army[y]);
              end else begin
                if (TPressure(Army[y]) < minPressure) then begin
                  minPressure:= TPressure(Army[y]);
                  ToTerritory:= Army[y];
                end;
              end;
            end else HasEnough[Army[y]]:= True;
          end;
        end;
      end;
      If ToTerritory = 0 then begin
        Extra2:= Extra2 + 4;
        bs(56, Extra2);
      end;
    Until ToTerritory > 0;
  end;

  if Extra2 >= 12 then bs(52, ToTerritory);
  if PNewArmies(PMe) = 1 then begin
    bs(52, 0);
    bs(56, 0);
  end;
end;

procedure KillPlayer_Attack(var FromTerritory, ToTerritory: integer);
var
  loop, WP, P, B, BT, PL, x, Cost, TT, EA,
  MaxCost, C, Armies, Y, MinCost, MinDiff: integer;

  Rank, Army: Array of integer;

begin
  // the occupation routine sometimes determines where the next attack should be and stores it in buffer 73
  if (bg(73) > 0) and (TArmies(bg(73)) > 1) then begin
    FromTerritory:= bg(73);
    KillPAttack(bg(74), FromTerritory, ToTerritory);
    if ToTerritory > 0 then exit else begin
      FromTerritory:= 0;
      bs(73, 0);
    end;
  end;

  RankSort(Rank);
  ArmySort(Army);
  if Rank[SAlivePlayersCount] <> PMe then WP:= Rank[SAlivePlayersCount] else WP:=0;
  if GameHasOneHuman(P) then WP:= P;
  bs(63, WP);
  MinCost:= 0;
  MaxCost:= PArmiesCount(PMe) div 2;

  loop:= 0;
  Repeat
  For y:= 1 to PTC do begin
    if TIsFront(Army[y]) and (TArmies(Army[y]) > 1) then begin
      C:= 0;
      For B:= 1 to TBordersCount(Army[y]) do begin
        BT:= TBorder(Army[y], B);
        If (TOwner(BT) = WP) or ( (WP = 0) and (not TIsMine(BT)) ) then begin
          C:= C + 1;
          If C = 1 then TT:= BT else TT:= 0;
        end;
      end;
      If C = 1 then begin
        if (  not ( (TArmies(TT) > 1) and (TArmies(BestFT(TT)) < 4) )  ) then begin
          ToTerritory:= TT;
          FromTerritory:= BestFT(ToTerritory);
          exit;
        end;
      end else if c > 1 then begin
        KillPAttack(WP, Army[y], TT);
        If TT > 0 then begin
          ToTerritory:= TT;
          FromTerritory:= Army[y];
          exit;
        end;
      end;
      If C > 1 then begin
        MinDiff:= 0;
        For B:= 1 to TBordersCount(Army[y]) do begin
          BT:= TBorder(Army[y], B);
          If (TOwner(BT) = WP) or ( (WP = 0) and (not TIsMine(BT)) )
           and (not ( (TArmies(BT) > 1) and (TArmies(BestFT(BT)) < 4) )) then begin
            if (trunc(abs(Army[y] - BT)) < MinDiff) or (MinDiff = 0) then begin
              MinDiff:= trunc(abs(Army[y] - BT));
              ToTerritory:= BT;
              FromTerritory:= BestFT(ToTerritory);
            end;
          end;
        end;
      end;
    end;

    if FromTerritory = 0 then begin
      For x:= 1 to 42 do begin
        IF TOwner(x) = WP then begin
          If TWeakestPath(Army[y], x, TT, PL, EA) then begin
            Armies:= TArmies(Army[y]);
            Cost:= EA + PL;
            if ( (Cost < MinCost) or (MinCost = 0) ) and (Armies > TArmies(TT))
             and (Armies > 3) and (Cost < MaxCost) then begin
              MinCost:= Cost;
              ToTerritory:= TT;
              FromTerritory:= BestFT(ToTerritory);
            end;
          end;
        end;
      end;
    end;

  end;
  loop:= loop + 1;
  if (ToTerritory = 0) and (bg(99) > 0) then WP:= 0;
  Until (ToTerritory > 0) or (loop > 1);
end;

procedure KillPlayer_Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
var
  c, TTtotal, FTtotal, T, P, BothTotal, FTA: integer;
  TsConnTT, TsConnFT, TsConnBoth: boolean;
  Army: array of integer;
begin
  bs(73, 0);
  P:= 0;
  FTA:= TArmies(FromTerritory) - 1;
  Armies:=FTA;  // Default is to occupy all
  ArmySort(Army);

  TTtotal:= 0;
  FTtotal:= 0;
  BothTotal:= 0;
  For T:= 1 to 42 do begin
    if ( ((P = 0) and (TOwner(T) <> PMe)) or (TOwner(T) = P) ) then begin
      TsConnTT:= TsAreConnected(P, T, ToTerritory);
      TsConnFT:= TsAreConnected(P, T, FromTerritory);
      if TsConnTT and TsConnFT then TsConnBoth:= True else TsConnBoth:= False;
      if TsConnBoth then BothTotal:= BothTotal + TArmies(T) + 1;
      if TsConnTT and (not TsConnFT) then TTtotal:= TTtotal + TArmies(T) + 1;
      if TsConnFT and (not TsConnTT) then FTtotal:= FTtotal + TArmies(T) + 1;
    end;
  end;
  TTtotal:= TTtotal + 1;  // make sure TTtotal has enough so add an extra army
  if TTtotal > FTA then Armies:= FTA;
  if (TTtotal < FTA) and (FTtotal >= FTA-TTtotal) then Armies:= TTtotal;
  if (TTtotal < FTA) and (FTtotal < FTA-TTtotal) then Armies:= FTA - FTtotal;
  if (TTtotal = 0) and (FTtotal = 0) then Armies:= FTA;
  if (TTtotal = 0) and (FTtotal <> 0) then Armies:= 0;
  if (TTtotal = 0) and (FTtotal <> 0) and (BothTotal <> 0) then begin
    if (FTtotal < BothTotal) then Armies:= FTA - FTtotal;
    if (FTtotal > BothTotal) then Armies:= BothTotal;
    if Armies > FTA then Armies:= FTA;
    bs(73, ToTerritory);
    bs(74, P);
  end;
  if (FromTerritory = 31) and (ToTerritory = 39) then begin
    c:= 0;
    For T:= 40 to 42 do if (TOwner(T) <> PMe) then c:= c + TArmies(T) + 2;
    Armies:= c;
    if Armies > FTA then Armies:= FTA;
  end;
end;

procedure KillPlayer_Fortification(var FromTerritory, ToTerritory, Armies: integer);
Var
  FT, P, WP, aMinPL, B, BT, Cost, TT, PL, EA, aMinCost, x, MaxArmy, T: integer;
  Rank, MinPL, TTa, MinCost, Army: array of integer;

begin
  FromTerritory:= 0;
  ToTerritory:= 0;
  ArmySort(Army);
  RankSort(Rank);
  SetArrayLength(MinCost, 43);
  SetArrayLength(MinPL, 43);
  SetArrayLength(TTa, 43);

  if Rank[SAlivePlayersCount] <> PMe then WP:= Rank[SAlivePlayersCount] else WP:=0;
  if GameHasOneHuman(P) then WP:= P;

  For x:= 1 to PTC do begin
    MinCost[Army[x]]:= 0;
    MinPL[x]:= 0;
    TTa[x]:= 0;
    For T:= 1 to 42 do begin
     if TOwner(T) = WP then begin
       Cost:= 0;
       if TWeakestPath(Army[x], T, TT, PL, EA) then begin
         Cost:= PL + EA - TArmies(T);
         if (Cost < MinCost[Army[x]]) or (MinCost[Army[x]] = 0) then MinCost[Army[x]]:= Cost;
       end;
       if (not TIsFront(Army[x])) and (TArmies(Army[x]) > 3) then begin
         TShortestPath(Army[x], T, TT, PL);
         if (PL < MinPL[x]) or (MinPL[x] = 0) then begin
           MinPL[x]:= PL;
           TTa[x]:= TT;
         end;
       end;
     end;
    end;
  end;

  if SAlivePlayersCount > 2 then begin
    aMinCost:= 0;
    For x:= PTC downto 1 do begin
      if TArmies(Army[x]) > 1 then begin
        For B:= 1 to TBordersCount(Army[x]) do begin
          BT:= TBorder(Army[x], B);
          if TIsMine(BT) then begin
            if MinCost[BT] > 0 then begin
              if ( (MinCost[BT] < MinCost[Army[x]]) or (MinCost[Army[x]] = 0) ) and ((MinCost[BT] <= aMinCost) or (AMinCost = 0)) then begin
                if (  (MinCost[BT] = aMinCost) and ( (TArmies(BT) > TArmies(ToTerritory)) or (TArmies(Army[x]) > TArmies(FromTerritory)) )  ) or (MinCost[BT] <> aMinCost) then begin
                  aMinCost:= MinCost[BT];
                  FromTerritory:= Army[x];
                  ToTerritory:= BT;
                  Armies:= TArmies(FromTerritory) - 1;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;

  if FromTerritory = 0 then begin
    aMinPL:= 0;
    For x:= 1 to PTC do begin
      if ( (MinPL[x] <= aMinPL) or (aMinPL = 0) ) and (MinPL[x] > 0) then begin
        if (  (MinPL[x] = aMinPL) and ( (TArmies(TTa[x]) > TArmies(ToTerritory)) or (TArmies(Army[x]) > TArmies(FromTerritory)) )  ) or (MinPL[x] <> aMinPL) then begin
          aMinPL:= MinPL[x];
          FromTerritory:= Army[x];
          ToTerritory:= TTa[x];
          Armies:= TArmies(FromTerritory) - 1;
        end;
      end;
    end;
  end;

  if (FromTerritory = 0) or (bg(63) = 0) then begin
    MaxArmy:= 1;
    For T:= 1 to 42 do begin
      if TIsMine(T) and (not TIsFront(T)) then begin
        if (TArmies(T) > MaxArmy) then begin
          MaxArmy:= TArmies(T);
          FT:= T;
          Armies:= TArmies(FromTerritory) - 1;
        end;
      end;
    end;
    if (FT > 0) and (not (FT = FromTerritory)) then begin // if it's the same FT that the previous code determined, don't change the ToTerritory
      if not (  (FromTerritory > 0) and ( (TArmies(FT) < 4) and (TArmies(FromTerritory) > 3) )  ) then begin
        FromTerritory:= FT;      // might not be neccessary to do the following > 0 check
        if TPathToFront(FromTerritory) > 0 then ToTerritory:= TPathToFront(FromTerritory) else FromTerritory:= 0;
        Armies:= TArmies(FromTerritory) - 1;
      end;
    end;
  end;

end;

{-------------------------------------End Kill Player Code---------------------------------}


procedure Assignment(var ToTerritory: integer);
var
  T,Y,Z: integer;
  MaximumValue,Value:integer;
begin
  ToTerritory:=0;
  for T:=1 to 42 do begin
    if TOwner(T)=0 then begin
      Value:=0;
      if (T<39) then 
        Value:=Value+10;
      Y:=TBordersCount(T);
      for Z:=1 to Y do begin
        if TIsMine(TBorder(T,Z)) then Value:=Value-1;
      end;
      if (Value>=MaximumValue) then begin
        MaximumValue:=Value;
        ToTerritory:=T;
      end;
    end;
  end;
        
end;

procedure Placement(var ToTerritory: integer);
var
  T,TA,X,Y,T2,D,D2,Z,KillPlayer: integer;
  MaxTerritoryValue,TerritoryValue,Score: double;
  TerritoryTo: integer;
  TerritoryArmies: integer;
  PT,PA,ET,EA:integer;
  TotalArmies: double;
  A:Integer;

begin
    // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Placement(ToTerritory);
    exit;
  end;

  TerritoryTo:=0;
  UBufferSet(49,0); 
  if ((PArmiesCount(PMe) < 10) and (not (trunc(ubufferget(50))=2))) then begin
    UBufferSet(50,1);
  end;
  if ((PArmiesCount(PMe) > 25) and (trunc(ubufferget(50))=1)) then begin
    UBufferSet(50,2);
  end;
  if (trunc(ubufferget(50))=1) then begin
    MaxTerritoryValue:=0;
    for T:=1 to 42 do begin
      if (TIsMine(T) and TIsFront(T)) then begin
        TWeakestFront(T,ET,EA);
        Score:=1000-EA;
        Score:=Score-((double(TPressure(T))/TFrontsCount(T))*2);
        Score:=Score+(TArmies(T) div 3);
        if (T>38) then Score:=Score-100;
        if ((T>9) and (T<14)) then Score:=Score-50;
        if (Score> MaxTerritoryValue) then begin
          MaxTerritoryValue:=Score;
          TerritoryTo:=T;
        end;
      end;
    end;
  end
  else begin
   
    CAnalysis(6,PT,PA,ET,EA);
    UBufferSet(39,EA);
    UBufferSet(40,EA-1);
    UBufferSet(41,EA-2);
    UBufferSet(42,EA-1);
    if (PA>EA+4) then begin
      UBufferSet(39,EA-25);
      UBufferSet(40,EA-26);
      UBufferSet(41,EA-27);
      UBufferSet(40,EA-26);
    end;
    CAnalysis(2,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    UBufferSet(10,EA+6);
    UBufferSet(12,EA+6);
    UBufferSet(13,EA+4);
    UBufferSet(11,EA+5);
    if (PA>(EA+4)) then begin
      UBufferSet(10,EA-20);
      UBufferSet(12,EA-20);
      UBufferSet(13,EA-22);
      UBufferSet(11,EA-21);
    end;  
    CAnalysis(4,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    UBufferSet(14,EA+6);
    UBufferSet(15,EA+6);
    UBufferSet(16,EA+6);
    UBufferSet(17,EA+6);
    UBufferSet(18,EA+6);
    UBufferSet(19,EA+6);
    if ((PA>(EA+9)) and (COwner(2)=PMe)) then begin
      UBufferSet(14,EA-20);
      UBufferSet(15,EA-19);
      UBufferSet(16,EA-20);
      UBufferSet(17,EA-21);
      UBufferSet(18,EA-22);
      UBufferSet(19,EA-23);
    end;
    CAnalysis(1,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    UBufferSet(1,EA+6);
    UBufferSet(2,EA+6);
    UBufferSet(3,EA+6);
    UBufferSet(4,EA+6);
    UBufferSet(5,EA+6);
    UBufferSet(6,EA+6);
    UBufferSet(7,EA+6);
    UBufferSet(8,EA+6);
    UBufferSet(9,EA+6);
    CAnalysis(3,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    if (not (COwner(4)=PMe)) then EA:=EA+15;
    UBufferSet(20,EA+6);
    UBufferSet(21,EA+6);
    UBufferSet(22,EA+6);
    UBufferSet(23,EA+6);
    UBufferSet(24,EA+6);
    UBufferSet(25,EA+6);
    UBufferSet(26,EA+6);
    CAnalysis(5,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    if (not (COwner(4)=PMe)) then EA:=EA+15;
    if (not (COwner(1)=PMe)) then EA:=EA+15;
    if (not (COwner(3)=PMe)) then EA:=EA+15;
    UBufferSet(27,EA+6);
    UBufferSet(28,EA+6);
    UBufferSet(29,EA+6);
    UBufferSet(30,EA+6);
    UBufferSet(31,EA+6);
    UBufferSet(32,EA+6);
    UBufferSet(33,EA+6);
    UBufferSet(34,EA+6);
    UBufferSet(35,EA+6);
    UBufferSet(36,EA+6);
    UBufferSet(37,EA+6);
    UBufferSet(38,EA+6);
    
    TotalArmies:=0;
    KillPlayer:=0;

    UBufferSet(49,0);
    for T:=1 to 10 do begin
      TotalArmies:=TotalArmies+PArmiesCount(T);
    end;
    for T:=1 to 10 do begin
      if ((COwner(6)=T) or (COwner(6)=PMe)) then begin
      if ((not (T=PMe))
      and (PArmiesCount(T)>trunc(TotalArmies * 0.35))) then begin
        KillPlayer:=T;
      end;
      if ((not (T=PMe))
      and (PArmiesCount(T)>trunc((TotalArmies-PArmiesCount(PMe))*0.41))) then begin
        KillPlayer:=T;
      end;
      if ((KillPlayer=T) and ((COwner(6)=PMe) or (COwner(6)=T))) then begin
        KillPlayer:=0;
        Y:=0;
        Z:=0;
        for T2:=1 to 6 do begin
          if (COwner(T2)=T) then Y:=Y+CBonus(T2);
          if (COwner(T2)=PMe) then Z:=Z+CBonus(T2);
        end;
        if (PTerritoriesCount(T)>11) then begin
          Y:=Y+((PTerritoriesCount(T) div 3)-3);
        end;
        if (PTerritoriesCount(PMe)>11) then begin
          Z:=Z+((PTerritoriesCount(PMe) div 3)-3);
        end;
        if ((Y>Z+3) and ((COwner(6)=T) or (COwner(6)=PMe))) then begin
          KillPlayer:=T;
          UBufferSet(49,T);
        end;
      end;   
      end;
    end;
    
    if (not (KillPlayer=0)) then begin
      for T:=1 to 42 do begin
        if TOwner(T)=KillPlayer then begin
          UBufferSet(T,TArmies(T));
        end;
        if ((COwner(TContinent(T)))=KillPlayer) then begin
          UBufferSet(T,-15-(CBonus(TContinent(T))*2)+TArmies(T));
        end;
      end;
    end;
    if (PArmiesCount(PMe)>TotalArmies+50) then begin
      for T:=1 to 42 do begin
        if (not (TIsMine(T))) then begin
          UBufferSet(T,TArmies(T));
          if ((COwner(TContinent(T)))>0) then begin
            UBufferSet(T,-30+TArmies(T));
          end;
        end;
      end;
    end;

    for X:=1 to 8 do begin
      for T:=1 to 42 do begin
        if (not TIsMine(T)) then begin
          Y:=TBordersCount(T);
          for Z:=1 to Y do begin
            T2:=TBorder(T,Z);
            if (not TIsMine(T2)) then begin
              D:=trunc(UBufferGet(T));
              D2:=trunc(UBufferGet(T2));
              if (D>(D2+TArmies(T))) then begin
                D:=D2+TArmies(T)+1;
                UBufferSet(T,D);
              end;
            end;
          end;
        end;
      end;
    end;
    
    for T:=1 to 42 do begin
      if (TIsMine(T)) then begin
        UBufferSet(T,0);
      end;
    end;
    if (KillPlayer=0) then begin
      CAnalysis(6,PT,PA,ET,EA);
      if (COwner(6)=PMe) then begin
        if TIsFront(39) then begin
          TA:=25;
          if (TArmies(38)>TA-5) then TA:=TArmies(38)+5;
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and (TArmies(A) > TA)) then begin
              TA:=TArmies(A);
            end;
          end; 
          UBufferSet(39,TA);
        end
        else begin
          TA:=25;
          if (TPressure(31)>TA) then TA:=TPressure(31);
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and (TArmies(A) > TA)) then begin
              TA:=TArmies(A);
            end;
          end; 
          UBufferSet(31,TA);
        end;
      end
      else begin
        if ((PA > (EA * 2)) or (PA>(EA+5))) and TIsMine(40) then begin
          if (TIsMine(41)) then begin
            TerritoryTo:=40;
          end;
          if (TIsMine(42)) then begin
            TerritoryTo:=40;
          end;
          if (TIsMine(39)) then begin
            TerritoryTo:=40;
          end;
          if (TIsMine(40)) then begin
            TerritoryTo:=40;
          end;
        end;
      end;
     
      if (COwner(6)=PMe) then begin
      CAnalysis(2,PT,PA,ET,EA);
      if (TerritoryTo=0) then begin
        if (COwner(2)=PMe) then begin
          if (not (TIsMine(14))) then begin
            TA:=20;
            if (TArmies(14)>TA-12) then TA:=TArmies(14)+12;
            UBufferSet(12,TA);
          end
          else begin
            TA:=20;
            if (TPressure(14)>TA) then TA:=TPressure(14);
            UBufferSet(14,TA);
          end;
          if (not (TIsMine(9))) then begin
            TA:=20;
            for X:=1 to 9 do begin
              if ((TArmies(X)>TA-12) and (not TIsMine(X))) then TA:=TArmies(X)+12;
            end;
            UBufferSet(10,TA);
          end
          else begin
            TA:=20;
            for X:=1 to 9 do begin
              if ((TArmies(X)>TA-12) and (not TIsMine(X))) then TA:=TArmies(X)+12;
            end;
            if ((TOwner(7)=TOwner(8)) and (not TIsMine(7))
                 and (TA < TArmies(7)+TArmies(8)+12)) then begin
              TA:=TArmies(7)+TArmies(8)+12;
            end;
            UBufferSet(9,TA);
          end;
        end
        else begin
           if (PA>1) then begin

            if ((TArmies(11)<1000) and TIsMine(11)) then TerritoryTo:=11;
            if ((TArmies(13)<1000) and TIsMine(13)) then TerritoryTo:=13;
            if ((TArmies(10)<1000) and TIsMine(10)) then TerritoryTo:=10;
            if ((TArmies(12)<1000) and TIsMine(12)) then TerritoryTo:=12;
          end;
        end;
      end;
      
      if ((TerritoryTo=0)
      and (not (COwner(2)=PMe))) then begin

            if ((TArmies(14)<1000) and TIsMine(14)) then TerritoryTo:=14;

      end;
      CAnalysis(1,PT,PA,ET,EA);
      if ((TerritoryTo=0)
      and (COwner(2)=PMe)) then begin
        if (((PA div 2)>EA) or (PA>(EA+10))) then begin
          if ((TArmies(1)<20) and TIsMine(1)) then TerritoryTo:=1;
          if ((TArmies(3)<20) and TIsMine(3)) then TerritoryTo:=3;
 
        end;
      end;
      CAnalysis(4,PT,PA,ET,EA);
      if ((TerritoryTo=0) 
      and (COwner(2)=PMe)) then begin
        if (((PA div 2)>EA)or (PA>(EA+10))) then begin
          if ((TArmies(14)<20) and TIsMine(14)) then TerritoryTo:=14;
          if ((TArmies(15)<20) and TIsMine(15)) then TerritoryTo:=15;
          if ((TArmies(16)<20) and TIsMine(16)) then TerritoryTo:=16;
  
        end;
      end; 
      if ((COwner(4)=PMe)) then begin
        UBufferSet(14,20);
        UBufferSet(15,20);
        UBufferSet(16,20);
      end;
      end;
    end;
    IF (kILLpLAYER>0) THEN BEGIN
      CAnalysis(6,PT,PA,ET,EA);
      if (COwner(6)=PMe) then begin
        if TIsFront(39) then begin
          TA:=12;
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and ((double(TArmies(A)) / 2) > double(TA))) then begin
              TA:=TArmies(A) div 2;
            end;
          end; 
          UBufferSet(39,TA);
        end
        else begin
          TA:=12;
          if (TPressure(31)>TA) then TA:=TPressure(31);
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and (double(TArmies(A)) / 2 > double(TA))) then begin
              TA:=TArmies(A) div 2;
            end;
          end; 
          UBufferSet(31,TA);
        end;
      end;
    end;
 
    if (TerritoryTo=0) then begin  
      MaxTerritoryValue:=0;
      for T:=1 to 42 do begin
        if TIsMine(T) then begin
          Y:=TBordersCount(T);
          D:=1000;
          for Z:=1 to Y do begin
            T2:=TBorder(T,Z);
            if not(TIsMine(T2)) then begin
              D2:=trunc(UBufferGet(T2));
              if (D2<D) then begin
                D:=D2;
                TA:=T2;
              end;
            end;
          end;
          if ((TArmies(T)-(trunc(ubufferget(T))+D))>trunc(MaxTerritoryValue)) then begin
            MaxTerritoryValue:=TArmies(T)-(trunc(ubufferget(T))+D);
            TerritoryTo:=T;
          end;
          if (KillPlayer=0) then begin
            if (TArmies(T)<trunc(ubufferget(T))) then begin
              if ((1000+trunc(ubufferget(T))-TArmies(T))>trunc(MaxTerritoryValue)) then begin
                MaxTerritoryValue:=1000+trunc(ubufferget(T))-TArmies(T);
                TerritoryTo:=T;
              end;
            end;
          end;
        end;
      end;
    end;
    if (TerritoryTo=0) then begin
      MaxTerritoryValue:=0;
      for T:=1 to 42 do begin
        if TIsFront(T) then begin 
          TerritoryValue:=1;
          TWeakestFront(T,ET,EA);
          TerritoryArmies:=TArmies(T);
          if EA<3 then begin
              TerritoryValue:=TerritoryArmies*(3-EA);
          end;
          if EA>2 then begin
            if EA>100 then begin
              EA:=100;
            end;
            TerritoryValue:=TerritoryValue+TArmies(T)+(100-EA);
          end;
          if ((TerritoryValue>=MaxTerritoryValue) 
              and ((TArmies(T)>1) or (TerritoryTo=0)) ) then begin
            MaxTerritoryValue:=TerritoryValue;
            TerritoryTo:=T;
          end;
        end;
      end;
    end;
  end;
  ToTerritory:=TerritoryTo;

end;



procedure Attack(var FromTerritory, ToTerritory: integer);
var
  T,X,Y,T2,TA,D,D2,Z,Z2,Y2,FT,FA,KillPlayer: integer;
  MaxTerritoryValue,TerritoryValue: double;
//  TerritoryValue: integer;
  TerritoryArmies: integer;
  PT,PA,ET,EA,ET2,EA2:integer;
  TotalArmies,A,TerritoryTo:Integer;

  MaxPoints, Points, CForce: double;
  P: integer;

begin
UMessageOn;

  // reset kill mode if the game no longer has human players
  if UBufferGet(98) > 0 then begin
   if GameHasNoHumans then UBufferSet(98, 0);
  end;

  // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Attack(FromTerritory, ToTerritory);
    If (not ((FromTerritory = 0) and (UBufferGet(98) > 0))) then exit;
  end;

  FromTerritory:=0;
  ToTerritory:=0;
  MaxTerritoryValue:=0;
  
  KillPlayer:=trunc(UBufferGet(49));
    CAnalysis(6,PT,PA,ET,EA);
    X:=0;
    if (COwner(6)>0) then begin
      Y:=CTerritoriesCount(5);
      for T:=32 to 38 do begin
        if ((COwner(6)=TOwner(T)) and (TArmies(T)>X+40)) then begin
          X:=TArmies(T)-40;
        end;
      end;
    end; 
    EA:=EA+X;
    UBufferSet(39,EA);
    UBufferSet(40,EA-1);
    UBufferSet(41,EA-2);
    UBufferSet(42,EA-1);
    if (PA>EA+4) then begin
      UBufferSet(39,EA-25);
      UBufferSet(40,EA-26);
      UBufferSet(41,EA-27);
      UBufferSet(40,EA-26);
    end;
    CAnalysis(2,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if ((COwner(6)=PMe) and (PA=0) and (not TIsMine(14))) then begin
      if ((COwner(1)=COwner(2))
      or (COwner(3)=COwner(2))
      or (COwner(4)=COwner(2))
      or (COwner(5)=COwner(2))) then begin
        EA:=EA;
      end
      else begin
//        X:=EA;
//        CAnalysis(1,PT,PA,ET,EA);
//        X:=X+EA;
//        CAnalysis(4,PT,PA,ET,EA);
//        X:=X+EA;
//        CAnalysis(2,PT,PA,ET,EA);
//        EA:=X;
        EA:=EA+100;
      end;
    end;

    UBufferSet(10,EA+6);
    UBufferSet(12,EA+6);
    UBufferSet(13,EA+4);
    UBufferSet(11,EA+5);
    if (PA>(EA+4)) then begin
      UBufferSet(10,EA-20);
      UBufferSet(12,EA-20);
      UBufferSet(13,EA-22);
      UBufferSet(11,EA-21);
    end;  
    CAnalysis(4,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    UBufferSet(14,EA+6);
    UBufferSet(15,EA+6);
    UBufferSet(16,EA+6);
    UBufferSet(17,EA+6);
    UBufferSet(18,EA+6);
    UBufferSet(19,EA+6);
    if ((PA>(EA+9)) and (COwner(2)=PMe)) then begin
      UBufferSet(14,EA-20);
      UBufferSet(15,EA-19);
      UBufferSet(16,EA-20);
      UBufferSet(17,EA-21);
      UBufferSet(18,EA-22);
      UBufferSet(19,EA-23);
    end;
    CAnalysis(1,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    UBufferSet(1,EA+6);
    UBufferSet(2,EA+6);
    UBufferSet(3,EA+6);
    UBufferSet(4,EA+6);
    UBufferSet(5,EA+6);
    UBufferSet(6,EA+6);
    UBufferSet(7,EA+6);
    UBufferSet(8,EA+6);
    UBufferSet(9,EA+6);
    CAnalysis(3,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    if (not (COwner(4)=PMe)) then EA:=EA+15;
    UBufferSet(20,EA+6);
    UBufferSet(21,EA+6);
    UBufferSet(22,EA+6);
    UBufferSet(23,EA+6);
    UBufferSet(24,EA+6);
    UBufferSet(25,EA+6);
    UBufferSet(26,EA+6);
    CAnalysis(5,PT,PA,ET,EA);
    if (not (COwner(6)=PMe)) then EA:=EA+1000;
    if (not (COwner(2)=PMe)) then EA:=EA+1000;
    if (not (COwner(4)=PMe)) then EA:=EA+15;
    if (not (COwner(1)=PMe)) then EA:=EA+15;
    if (not (COwner(3)=PMe)) then EA:=EA+15;
    UBufferSet(27,EA+6);
    UBufferSet(28,EA+6);
    UBufferSet(29,EA+6);
    UBufferSet(30,EA+6);
    UBufferSet(31,EA+6);
    UBufferSet(32,EA+6);
    UBufferSet(33,EA+6);
    UBufferSet(34,EA+6);
    UBufferSet(35,EA+6);
    UBufferSet(36,EA+6);
    UBufferSet(37,EA+6);
    UBufferSet(38,EA+6);
    
    TotalArmies:=0;
    KillPlayer:=0;
    UBufferSet(49,0);

    for T:=1 to 10 do begin
      TotalArmies:=TotalArmies+PArmiesCount(T);
    end;

    for T:=1 to 10 do begin
      if ((COwner(6)=T) or (COwner(6)=PMe)) then begin
        if ((not (T=PMe)) and (PArmiesCount(T)>trunc(TotalArmies * 0.35))) then begin
          KillPlayer:=T;
        end;

        if ((not (T=PMe))
        and (PArmiesCount(T)>trunc((TotalArmies-PArmiesCount(PMe))*0.41))) then begin
          KillPlayer:=T;
        end;

        if ((KillPlayer=T) and ((COwner(6)=PMe) or (COwner(6)=T))) then begin
          KillPlayer:=0;
          Y:=0;
          Z:=0;
          for T2:=1 to 6 do begin
            if (COwner(T2)=T) then Y:=Y+CBonus(T2);
            if (COwner(T2)=PMe) then Z:=Z+CBonus(T2);
          end;
          if (PTerritoriesCount(T)>11) then begin
            Y:=Y+((PTerritoriesCount(T) div 3)-3);
          end;
          if (PTerritoriesCount(PMe)>11) then begin
            Z:=Z+((PTerritoriesCount(PMe) div 3)-3);
          end;
          if (Y>Z+3) then begin
            KillPlayer:=T;
            UBufferSet(49,T);
          end;
        end;   
      end;
    end;
    
    if (not (KillPlayer=0)) then begin
      for T:=1 to 42 do begin
        if TOwner(T)=KillPlayer then begin
          UBufferSet(T,TArmies(T));
        end;
        if ((COwner(TContinent(T)))=KillPlayer) then begin
          UBufferSet(T,-15-(CBonus(TContinent(T))*2)+TArmies(T));
        end;
      end;
    end;
    if (PArmiesCount(PMe)>TotalArmies+50) then begin
      for T:=1 to 42 do begin
        if (not (TIsMine(T))) then begin
          UBufferSet(T,TArmies(T));
          if ((COwner(TContinent(T)))>0) then begin
            UBufferSet(T,-30+TArmies(T));
          end;
        end;
      end;
    end;

    for X:=1 to 8 do begin
      for T:=1 to 42 do begin
        if (not TIsMine(T)) then begin
          Y:=TBordersCount(T);
          for Z:=1 to Y do begin
            T2:=TBorder(T,Z);
            if (not TIsMine(T2)) then begin
              D:=trunc(UBufferGet(T));
              D2:=trunc(UBufferGet(T2));
              if (D>(D2+TArmies(T))) then begin
                D:=D2+TArmies(T)+1;
                UBufferSet(T,D);
              end;
            end;
          end;
        end;
      end;
    end;
    
    for T:=1 to 42 do begin
      if (TIsMine(T)) then begin
        UBufferSet(T,0);
      end;
    end;
    if (KillPlayer=0) then begin
      CAnalysis(6,PT,PA,ET,EA);
      if (COwner(6)=PMe) then begin
        if TIsFront(39) then begin
          TA:=25;
          if (TArmies(38)>TA-5) then TA:=TArmies(38)+5;
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and (TArmies(A) > TA)) then begin
              TA:=TArmies(A);
            end;
          end; 
          UBufferSet(39,TA);
        end
        else begin
          TA:=25;
          if (TPressure(31)>TA) then TA:=TPressure(31);
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and (TArmies(A) > TA)) then begin
              TA:=TArmies(A);
            end;
          end; 
          UBufferSet(31,TA);
        end;
      end
      else begin
        if ((PA > (EA * 2)) or (PA>(EA+5))) then begin
          if (TIsMine(41)) then begin
            TerritoryTo:=40;
          end;
          if (TIsMine(42)) then begin
            TerritoryTo:=40;
          end;
          if (TIsMine(39)) then begin
            TerritoryTo:=40;
          end;
          if (TIsMine(40)) then begin
            TerritoryTo:=40;
          end;
        end;
      end;
     
      if (COwner(6)=PMe) then begin
      CAnalysis(2,PT,PA,ET,EA);
      if (TerritoryTo=0) then begin
        if (COwner(2)=PMe) then begin
          if (not (TIsMine(14))) then begin
            TA:=20;
            if (TArmies(14)>TA-12) then TA:=TArmies(14)+12;
            UBufferSet(12,TA);
          end
          else begin
            TA:=20;
            if (TPressure(14)>TA) then TA:=TPressure(14);
            UBufferSet(14,TA);
          end;
          if (not (TIsMine(9))) then begin
            TA:=20;
            for X:=1 to 9 do begin
              if ((TArmies(X)>TA-12) and (not TIsMine(X))) then TA:=TArmies(X)+12;
            end;
            UBufferSet(10,TA);
          end
          else begin
            TA:=20;
            for X:=1 to 9 do begin
              if ((TArmies(X)>TA-12) and (not TIsMine(X))) then TA:=TArmies(X)+12;
            end;
            if ((TOwner(7)=TOwner(8)) and (not TIsMine(7))
              and (TA < TArmies(7)+TArmies(8)+12)) then begin
              TA:=TArmies(7)+TArmies(8)+12;
            end;
            UBufferSet(9,TA);
          end;
        end
        else begin
           if (((PA div 2)>EA) or (PA>(EA+6))) then begin
            if ((TArmies(10)<20) and TIsMine(10)) then TerritoryTo:=10;
            if ((TArmies(12)<20) and TIsMine(12)) then TerritoryTo:=12;
          end;
        end;
      end;
      CAnalysis(1,PT,PA,ET,EA);
      if ((TerritoryTo=0)
      and (COwner(2)=PMe)) then begin
        if (((PA div 2)>EA) or (PA>(EA+10))) then begin
          if ((TArmies(1)<20) and TIsMine(1)) then TerritoryTo:=1;
          if ((TArmies(3)<20) and TIsMine(3)) then TerritoryTo:=3;
 
        end;
      end;
      CAnalysis(4,PT,PA,ET,EA);
      if ((TerritoryTo=0) 
      and (COwner(2)=PMe)) then begin
        if (((PA div 2)>EA)or (PA>(EA+10))) then begin
          if ((TArmies(14)<20) and TIsMine(14)) then TerritoryTo:=14;
          if ((TArmies(15)<20) and TIsMine(15)) then TerritoryTo:=15;
          if ((TArmies(16)<20) and TIsMine(16)) then TerritoryTo:=16;
  
        end;
      end; 
      if ((COwner(4)=PMe)) then begin
        UBufferSet(14,20);
        UBufferSet(15,20);
        UBufferSet(16,20);
      end;
      end;
    end;

    IF (kILLpLAYER>0) THEN BEGIN
      CAnalysis(6,PT,PA,ET,EA);
      if (COwner(6)=PMe) then begin
        if TIsFront(39) then begin
          TA:=12;
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and ((double(TArmies(A)) / 2) > double(TA))) then begin
              TA:=TArmies(A) div 2;
            end;
          end; 
          UBufferSet(39,TA);
        end
        else begin
          TA:=12;
          if (TPressure(31)>TA) then TA:=TPressure(31);
          for A:=1 to 38 do begin
            if ((not TIsMine(A)) and (double(TArmies(A)) / 2 > double(TA))) then begin
              TA:=TArmies(A) div 2;
            end;
          end; 
          UBufferSet(31,TA);
        end;
      end;
    end;

  CAnalysis(6,PT,PA,ET,EA);
  if (PA>EA+5) then begin
    if (TIsMine(40) and (TArmies(40)>3)) then begin
      if (not (TIsMine(42))) then begin
        FromTerritory:=40;
        ToTerritory:=42;
      end;
      if (not (TIsMine(41))) then begin
        FromTerritory:=40;
        ToTerritory:=41;
      end;
    end;
  end;

  if (COwner(6)=PMe) then begin
    CAnalysis(2,PT,PA,ET,EA);
    if (PA>EA+5) then begin
      if (TIsMine(12) and TIsMine(10) and (not (COwner(2)=PMe))) then begin
        if (TArmies(12)>3) then begin
          FromTerritory:=12;
          if (not (TIsMine(13))) then ToTerritory:=13;
          if (not (TIsMine(11))) then ToTerritory:=11;
        end;
        if (TArmies(10)>3) then begin
          if (not (TIsMine(11))) then begin
            FromTerritory:=10;
            ToTerritory:=11;
          end;
        end;
      end;
    end;
  end;
  if (COwner(2)=PMe) then begin
    if ((not TIsMine(9))
    and (TArmies(10)>(TArmies(9)+8))
    and (COwner(1)>0)) then begin
      FromTerritory:=10;
      ToTerritory:=9;
    end;

    if ((TIsMine(14)) and (COwner(3)>0) and (not (COwner(3)=PMe))) then begin
      if (TArmies(25)<TArmies(26)) then begin
        if (TArmies(14)>(TArmies(25)+5)) then begin
          FromTerritory:=14;
          ToTerritory:=25;
        end;
      end
      else begin
        if (TArmies(14)>(TArmies(26)+5)) then begin
          FromTerritory:=14;
          ToTerritory:=26;
        end;
      end;
    end;
    if ((TIsMine(15)) and (COwner(5)>0) and (not (COwner(5)=PMe))) then begin
      if (TArmies(15)>(TArmies(27)+5)) then begin
        FromTerritory:=15;
        ToTerritory:=27;
      end;
    end;
    if ((TIsMine(16)) and (COwner(5)>0) and (not (COwner(5)=PMe))) then begin
      if (TArmies(16)>(TArmies(27)+5)) then begin
        FromTerritory:=16;
        ToTerritory:=27;
      end;
    end;
  end;
  if (COwner(6)=PMe) then begin
    if ((not TIsMine(31))
    and (TArmies(39)>(TArmies(31)+8))
    and (COwner(5)>0)) then begin
      FromTerritory:=39;
      ToTerritory:=31;
    end;
  end;


  TA:=0;  //  bug fix by Nathan Scarbrough 6-9-10 #*#
  if (FromTerritory=0) then begin
    for T:=1 to 42 do begin
      D:=1000;
      if TIsMine(T) then begin
        Y:=TBordersCount(T);
        for Z:=1 to Y do begin
          T2:=TBorder(T,Z);
          if not(TIsMine(T2)) then begin
            D2:=trunc(UBufferGet(T2));
            if (D2<D) then begin 
              D:=D2;
              TA:=T2;
            end;
          end;
        end;
        if TIsBordering(T, TA) and (not TIsMine(TA)) then begin //  bug fix by Nathan Scarbrough 6-9-10 #*#
          if (KillPlayer>0) then begin
            if (((TArmies(T)-(25+D))>trunc(MaxTerritoryValue))
            and (TArmies(T)>3)) then begin
              MaxTerritoryValue:=TArmies(T)-(5+D);
              FromTerritory:=T;
              ToTerritory:=TA;
            end;
          end
          else begin
            if (((TArmies(T)-(15+trunc(ubufferget(T))+D))>trunc(MaxTerritoryValue*1.15))
            and (TArmies(T)>3)) then begin
              MaxTerritoryValue:=(double(TArmies(T)) - (15+ubufferget(T)+D))/1.15;
              FromTerritory:=T;
              ToTerritory:=TA;
              if not SConquest then begin
                if (((TArmies(T)-(15+D))>trunc(MaxTerritoryValue))
                and (TArmies(T)>3)) then begin
                  MaxTerritoryValue:=TArmies(T)-(15+D);
                  FromTerritory:=T;
                  ToTerritory:=TA;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
          
  if (FromTerritory=0) then begin
    MaxTerritoryValue:=0;
    if not SConquest then begin  
      for T:=1 to 42 do begin
        if ((TIsFront(T)) and (trunc(ubufferget(T))=0)) then begin 
          if (TArmies(T)>3) then begin
            TerritoryValue:=0;
            TerritoryArmies:=TArmies(T);
            TWeakestFront(T,ET,EA);
            if EA<3 then begin
              TerritoryValue:=TerritoryValue+((3-EA)*200);
              if (TerritoryArmies>100) then begin
                TerritoryArmies:=100;
              end;
              TerritoryValue:=TerritoryValue+TerritoryArmies;
            end;
            Y:=TBordersCount(T);
            for Z:=1 to Y do begin
            TA:=TBorder(T,Z);
            if ((not COwner(6)=PMe) and (COwner(6)=TOwner(TA)) and (TArmies(T)>(TArmies(TA)+10))) then begin
              if ((COwner(6)=COwner(TContinent(TA)))
                and (trunc(TerritoryValue) < 10000-TArmies(TA))) then begin
                TerritoryValue:=10000-TArmies(TA);
                FromTerritory:=T;
                ToTerritory:=TA;
              end;
              if ((COwner(6)=COwner(TContinent(TA)))
                and (TArmies(TA)*5<TArmies(T))
                and (TerritoryValue < 1000 - TArmies(TA))) then begin
                TerritoryValue:=1000-TArmies(TA);
                FromTerritory:=T;
                ToTerritory:=TA;
              end;
            end;
            if (TerritoryValue>MaxTerritoryValue) then begin
              MaxTerritoryValue:=TerritoryValue;
              FromTerritory:=T;
            end;
            end;        
          end;
        end;
      end;
      if (FromTerritory>0) then begin
        MaxTerritoryValue:=0;
        TWeakestFront(FromTerritory,ET,EA);
        Y:=TBordersCount(FromTerritory);
        for Z:=1 to Y do begin
          T2:=TBorder(FromTerritory,Z);
          if ((TArmies(T2)=EA)and (not TIsMine(T2))) then begin
            TWeakestFront(T2,ET2,EA2);
            Y2:=TBordersCount(T2);
            FA:=0;
            FT:=0;
            for Z2:=1 to Y2 do begin
              if (not (TIsMine(TBorder(T2,Z2)))) then begin
                FA:=FA+TArmies(TBorder(T2,Z2));
                FT:=FT+1;
              end;
            end;
            if (FT>0) then begin      // added a few zeros to fix bug (NS) *#*
              TerritoryValue:=10000000-(double(EA2)*4+(double(FA)/FT));
            end
            else begin 
             TerritoryValue:=500;
            end;
            if (TerritoryValue>MaxTerritoryValue) then begin
              MaxTerritoryValue:=TerritoryValue;
              ToTerritory:=T2;
            end;
          end;
        end;
      end;
    end;
  end;

  // Code added by Nathan Scarbrough  06-08-10
  // Forces Australian to get a card whenever it would be beneficial to do so
  // It also prevents the game from becoming stagnant

  if (ToTerritory = 0) and (not SCardsBasedOnCombo) and (not SConquest) and (PArmiesCount(PMe) > 30) then begin

    CForce:= (PCardTurnInValue(PMe) div 3) + 2;
    // if I haven't earned a card in the last 3 turns then increase CForce
    if (bg(61) > 2) and (not SCardsBasedOnCombo) then begin
    if GameHasOneHuman(P) and (  PArmiesCount(P) > ( trunc(0.9 * double(PArmiesCount(PMe))) )  ) then
      CForce:= trunc(double(CForce) * 1.4 * double(bg(61) - 1)) + 2
    else
      CForce:= trunc(double(CForce) * 1.8 * double(bg(61) - 1)) + 3;
    end;

    // look for the attack with the best chance to win
    MaxPoints:=0;
    Points:= 0;
    for T:=1 to 42 do begin
      if TIsFront(T) and (TArmies(T) > 2) then begin
        TWeakestFront(T, ET, EA);
        if (EA < CForce) and (TArmies(T) > EA) then begin
          Points:= (1/double(EA)) - (1/double(TArmies(T)));
          if (Points > MaxPoints) then begin
            MaxPoints:= Points;
            FromTerritory:= T;
            ToTerritory:= ET;
          end;
        end;
      end;
    end;
  end;

end;

procedure Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
var
  FromIsFront, ToIsFront: boolean;
  KillPlayer: integer;

begin
  // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Occupation(FromTerritory, ToTerritory, Armies);
    exit;
  end;

  FromIsFront := TIsFront(FromTerritory);
  ToIsFront := TIsFront(ToTerritory);
  Armies:=0;
  Armies:=(TArmies(FromTerritory)-1); 
  UBufferSet(ToTerritory,0);


  if (COwner(6)=PMe) then begin
    if ((FromTerritory=39) and (ToTerritory=31)) then begin
      UBufferSet(31,ubufferget(39));
      UBufferSet(39,0);
      if (ubufferget(31)<25) then UBufferSet(31,25);
    end;
  end;
  if (COwner(6)=PMe) then begin
  if (COwner(2)=PMe) then begin
    if ((FromTerritory=12) and (ToTerritory=14)) then begin
      UBufferSet(14,ubufferget(12));
      UBufferSet(12,0);
    end;
  end;
  if (COwner(2)=PMe) then begin
    if ((FromTerritory=10) and (ToTerritory=9)) then begin
      UBufferSet(9,ubufferget(10));
      UBufferSet(10,0);
    end;
  end;
  end;
  Armies:=(TArmies(FromTerritory)-1)

  if ToIsFront then begin
    Armies:=(TArmies(FromTerritory)-(1+trunc(UBufferGet(FromTerritory))));
    if (Armies<0) then Armies:=0;  
  end;
  if (ToTerritory=41) then begin
    Armies:=0;
  end;
  if ((ToTerritory=40) and (FromTerritory=39)) then begin
    Armies:=(TArmies(FromTerritory)-1);
    if (Armies > (TArmies(42)+5)) then Armies := (TArmies(42)+5);
    if (Armies < (TArmies(39) div 2)) then Armies:=(TArmies(39) div 2);
  end;
  if ((ToTerritory=42) and (FromTerritory=39)) then begin
    Armies:=0;
  end;
  if (ToTerritory=39) then begin
    Armies:=(TArmies(FromTerritory)-1);
  end;


  if ((FromTerritory=31) and (ToTerritory=39)) then begin
    UBufferSet(39, ubufferget(39)-25);
    UBufferSet(40, ubufferget(40)-25);
    UBufferSet(41, ubufferget(41)-25);
    UBufferSet(42, ubufferget(42)-25);
  end;
  if (COwner(6)=PMe) then begin
  if (((FromTerritory=14) and (ToTerritory=12))
   or ((FromTerritory=9) and (ToTerritory=10))) then begin
    UBufferSet(10,ubufferget(10)-29);
    UBufferSet(12,ubufferget(12)-29);
    UBufferSet(13,ubufferget(13)-29);
    UBufferSet(11,ubufferget(11)-29);
  end;
  
  if ((FromTerritory=12) and (ToTerritory=13)) then begin
    Armies:=0;
  end;
  if ((FromTerritory=12) and (ToTerritory=11)) then begin
    Armies:=0;
  end;
  if ((FromTerritory=10) and (ToTerritory=11)) then begin
    Armies:=0;
  end;
  if ((FromTerritory=12) and (ToTerritory=10)) then begin
    Armies:=(TArmies(FromTerritory) div 2);
  end;
  if ((FromTerritory=10) and (ToTerritory=12)) then begin
    Armies:=(TArmies(FromTerritory) div 2);
  end;
  if ((FromTerritory=12) and (ToTerritory=14)) then begin
    Armies:=(TArmies(FromTerritory) - 20);
    if (Armies<0) then Armies:=0;
  end;
  if ((FromTerritory=10) and (ToTerritory=9)) then begin
    Armies:=(TArmies(FromTerritory) -20);
    if (Armies<0) then Armies:=0;
  end;
  if (COwner(2)=PMe) then begin
    if ((FromTerritory=12) and (ToTerritory=14)) then begin
      Armies:=(TArmies(FromTerritory) - 1);
      if (Armies<0) then Armies:=0;
    end;
    if ((FromTerritory=10) and (ToTerritory=9)) then begin
      Armies:=(TArmies(FromTerritory) - 1);
      if (Armies<0) then Armies:=0;
    end;
    if (FromTerritory=9) then begin
      Armies:=(TArmies(FromTerritory) - 20);
      if (Armies<0) then Armies:=0;
    end;
    if (FromTerritory=14) then begin
      Armies:=(TArmies(FromTerritory) -20);
      if (Armies<0) then Armies:=0;
    end;
  end;   

  if ((COwner(6)=PMe) and (COwner(2)=PMe)) then begin
    if (FromTerritory=14) then begin
      Armies:=(TArmies(FromTerritory) -20);
      if (Armies<0) then Armies:=0;
    end;
    if (FromTerritory=15) then begin
      Armies:=(TArmies(FromTerritory) -20);
      if (Armies<0) then Armies:=0;
    end;
    if (FromTerritory=16) then begin
      Armies:=(TArmies(FromTerritory) -20);
      if (Armies<0) then Armies:=0;
    end;
    if (FromTerritory=1) then begin
      Armies:=(TArmies(FromTerritory) -20);
      if (Armies<0) then Armies:=0;
    end;
    if (FromTerritory=3) then begin
      Armies:=(TArmies(FromTerritory) -20);
      if (Armies<0) then Armies:=0;
    end;
  end;
  
  if ((FromTerritory=14) and (ToTerritory=17)) then begin
    Armies:=(TArmies(FromTerritory) div 2);
  end;
  if ((FromTerritory=20) and (ToTerritory=19)) then begin
    Armies:=(TArmies(FromTerritory) div 2);
  end;
  if (COwner(4)=PMe) then begin
    if ((FromTerritory=16) and (ToTerritory=15)) then begin
      Armies:=(TArmies(FromTerritory) div 2);
    end;
    if ((FromTerritory=15) and (ToTerritory=16)) then begin
      Armies:=(TArmies(FromTerritory) div 2);
    end;
    if ((FromTerritory=16) and (ToTerritory=14)) then begin
      Armies:=(TArmies(FromTerritory) div 2);
    end;
    if ((FromTerritory=14) and (ToTerritory=16)) then begin
      Armies:=(TArmies(FromTerritory) div 2);
    end;
    if ((FromTerritory=14) and (ToTerritory=15)) then begin
      Armies:=(TArmies(FromTerritory) div 2);
    end;
    if ((FromTerritory=15) and (ToTerritory=14)) then begin
      Armies:=(TArmies(FromTerritory) div 2);
    end;
  end;
  if (COwner(3)=PMe) then begin
    if ((FromTerritory=22)
    or  (FromTerritory=26)
    or  (FromTerritory=20)) then begin
      Armies:=TArmies(FromTerritory)-20;
      if Armies<0 then Armies:=0;
    end;
  end;
  end;
  if ((KillPlayer>0) and (not (FromTerritory=31))) then Armies:=(TArmies(FromTerritory)-1);
If (Armies<0) then Armies:=0;


end;


procedure Fortification(var FromTerritory, ToTerritory, Armies: integer);
var
  T,B,MaxArmy: integer;

  // Kill Player variables
  extra, X, C, C1, TotalEnemyArmies, P, MaxPArmiesCount: integer;
  Human, Abort: boolean;
  TM: double;
begin
  if not SConquest then bs(61, bg(61)+1) else bs(61,0);   //  61 - successive turns without conquest counter
  if GameHasOneHuman(P) then begin
    C:= 0;
    C1:= 0;
    For X:= 1 to 10 do begin
      if PActive(X) and (PProgram(X) = 'vexer.trp') then C:= C + 1;   // check to see if Vexer is dead
      if PAlive(X) and (PProgram(X) = 'vexer.trp') then C1:= C1 + 1;
    end;
    extra:= 0;
    if (PCardTurnInValue(P) > PCardTurnInValue(PMe)) and (PCardCount(P) > 1) then Extra:= PCardTurnInValue(P) - PCardTurnInValue(PMe);
    If (C = 1) and (C1 = 0) and ( PArmiesCount(PMe) > (2 * PArmiesCount(P) + 3) + Extra ) then begin
      UBufferSet(98, 1);
    end;
    if PArmiesCount(PMe) > (3 * PArmiesCount(P)) then begin
      UBufferSet(98, 1);
    end;
  end;


  {----------------------------------finisher----------------------------------}
  // improved finisher.trp code
  if (UBufferGet(99) = 0) and (PCardCount(PMe) > 2) then begin
    if SCardsBasedOnCombo then TM:= 1.0 else TM:=0.8;
    Abort:=False;
    Human:=False;
    TotalEnemyArmies:=0;
    MaxPArmiesCount:=0;	// The number of armies that my strongest enemy has
    for P:= 1 to 10 do begin
      if (PAlive(P)) and (P<>PMe) then begin
        if PArmiesCount(P) >= MaxPArmiesCount then begin
          MaxPArmiesCount:= PArmiesCount(P);
          if (NOT (PArmiesCount(P) = MaxPArmiesCount)) then Abort:=False;	// 1st and 2nd strongest armies are the same, don't reset abort to false
          if (PCardCount(P) > 2) and (PCardTurnInValue(P) > 25) then Abort:= True;
        end;
        if PHuman(P) and (PCardCount(P) > 3) and (PCardTurnInValue(P) > 20) then Abort:= True;
        if PHuman(P) then begin
          if (not (PArmiesCount(P) < trunc(double(PArmiesCount(PMe)) * 0.25))) then TM:= TM + 0.2;
          If PCardTurnInValue(P) > PCardTurnInValue(PMe) then TotalEnemyArmies:= TotalEnemyArmies + PCardTurnInValue(P) - PCardTurnInValue(PMe);
        end;
        If (pos('vexer', lowercase(PProgram(P))) > 0) then begin
          if (not (PArmiesCount(P) < trunc(double(PArmiesCount(PMe)) * 0.25))) then TM:= TM + 0.2;
          if (PCardCount(P) > 3) and (PCardTurnInValue(P) > 25) then Abort:= True;
          If PCardTurnInValue(P) > PCardTurnInValue(PMe) then TotalEnemyArmies:= TotalEnemyArmies + PCardTurnInValue(P) - PCardTurnInValue(PMe);
        end;                                                    // pretend there are more enemy armies if his CTIV is greater then mine
        TotalEnemyArmies:= TotalEnemyArmies + PArmiesCount(p);
      end;
    end;

    // if there's more than 4 players, I'll get a lot of cards by killing them so then lower the threshold multiplier
    if (SAlivePlayersCount > 4) then TM:= TM - 0.1;

    // if I have a lot of armies then lower TM because on average when attacking 3 dice against 2
    // I'll take out 7 enemy armies for every 6 I lose, so I need less armies to win
    if (PArmiesCount(PMe) > 200) then begin
      TM:= TM * 0.9;
      abort:= false;
    end;
    if (PArmiesCount(PMe) > 400) then TM:= TM * 0.95;

    if (PArmiesCount(PMe) > trunc(TotalEnemyArmies * TM)) and (NOT Abort) then UBufferSet(99, 1);
    if (PArmiesCount(PMe) > trunc(TotalEnemyArmies*1.4)) then UBufferSet(99, 1);		// If TM > 1.4 then switch to Kill Player even if Abort = true
  end;

  // check for kill player mode
  if (UBufferGet(99) = 1) or (UBufferGet(98) > 0) then begin
    KillPlayer_Fortification(FromTerritory, ToTerritory, Armies);
    exit;
  end;


  FromTerritory:=0;
  ToTerritory:=0;
  Armies:=0;
  MaxArmy:=1;
  if (COwner(6)=PMe)
    then begin
    if (TArmies(40)>1) then begin
      Armies:=TArmies(40)-1;
      FromTerritory:=40;
      ToTerritory:=39;
    end;
    if (TArmies(42)>1) then begin
      Armies:=TArmies(42)-1;
      FromTerritory:=42;
      ToTerritory:=39;
    end;
  end;
  
  if (FromTerritory=0) then begin
    for T:=1 to 42 do begin
      if ((TIsMine(T)) 
      and (trunc(ubufferget(T))=0) 
      and (not TIsFront(T))) then begin  
        if TArmies(T)>MaxArmy then begin
          MaxArmy := TArmies(T);
          FromTerritory := T;
        end;
      end; 
    end;
    
    if FromTerritory>0 then begin
      for B:=1 to TBordersCount(FromTerritory) do begin
        if ToTerritory=0 then begin
          T:=TBorder(FromTerritory,B);
          if TIsMine(T) and TIsFront(T) then begin
            ToTerritory:=T;
          end;
        end;
      end;
      if ToTerritory=0 then begin
        for B:=1 to TBordersCount(FromTerritory) do begin
          if ToTerritory=0 then begin
            T:=TBorder(FromTerritory,B);
            if TIsMine(T) then begin
              ToTerritory:=T;
            end;
          end;
        end;
      end;
      if ToTerritory>0 then begin
        Armies:=TArmies(FromTerritory)-1;
      end;
    end;
  end;
end;

begin
end.