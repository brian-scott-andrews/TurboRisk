{
Program: Raptorbot

Author: Donny Phillips

Description: basically I took simple.trp and kept modifying it
and adding things, and this is what I ended up with.
Works best in chaotic 9/10 player games.
}

// Search for #*# to find bug fixes done by Nathan Scarbrough

function AttackContinent (C :integer) :boolean;
var
  PT, PA, ET, EA :integer;
  ratio :double;
begin
  CAnalysis (C, PT, PA, ET, EA);

  if (ET > 0) then 
  	ratio :=PA / EA 
  else 
  	ratio :=1;

  if (ratio > 2) then 
  	UBufferSet (2, C);

  if (C > 6) or (C < 1) then 
  	result :=false 
  else 
  	result :=true;
end;


procedure Assignment(var ToTerritory: integer);
var
  T, HValue, x, C :integer;
begin
  HValue :=-100;
  ToTerritory :=0;

  for T :=1 to 42 do 
  	if TOwner(T) = 0 then 
  	begin
	    x :=0;
	    C :=TContinent(T);

	    if (C = 5) then //or (C = 6) then
	       x :=x + T;

	    if (x > HValue) then 
	    begin
	       HValue :=x;
	       ToTerritory :=T;
	    end;
  	end;
end;      



procedure Placement(var ToTerritory: integer);
// Place a single army; return result in ToTerritory
var 
  P, A, lilT, PT, PA, ET, EA, C, x, y, z, highest, T, place :integer;
begin
  ToTerritory :=0;
  highest :=-100000;  // changed from -1000, procedure returned 0 if EA > just over 1000 - Nathan Scarbrough July 09 #*#

  if (PNewArmies(PMe) = 1) then 
  		UBufferSet (1, 0);

  if (PTerritoriesCount(PMe) <= 8) then 
  		place :=(trunc(UBufferGet (1))) 
  else 
  		place :=0;

  if (place <> 0) then 
  		ToTerritory :=place 
  else 
  begin
    UBufferSet (2, 0);  

    for C :=1 to 6 do 
    	AttackContinent(C);

    for T :=1 to 42 do 
      if TIsFront(T) and TIsMine(T) then 
      begin
        z :=0;

        TWeakestFront (T, ET, EA);
        z :=z + EA;
  
        C :=TContinent(T);      
        CAnalysis(C, PT, PA, ET, EA);
        x :=PA-EA;
        y :=PT-ET;
        z :=x + y  + TFrontsCount(T);

        x :=CTerritoriesCount(C);

        if (x - PT < 3) then 
        		z :=z + 3;

        if (PT >=2) and (C <> 5) then 
        		z :=z + 2;

        if (PT = ET) then 
        		z :=z + 1;

        if (EA - PA < 3) then 
        		z :=z + 2;

        if (ET < 3) and (C <> 5) then 
        		z :=z + 8 
        else if (ET = 0) then 
	        	z :=z + 4;
    
        if (PT > 2) and (C = 3) then 
        		z :=z + 3;

        CLeader (C, P, lilT, A);

        if (P = PMe) and (EA = 0) then 
        		z := z + 30 
        else if (P = PMe) then 
        		z :=z + 4;

        x :=TArmies(T);

        if (x < 8) then 
        		z :=z + (8 - x);

        if (x > 8) and (PA > TPressure(T) - 5) then 
        		z :=z - 8;

        if (x < 4) then 
        		z :=z + 4;

        if ((trunc(UBufferGet(2))) = C) then 
        		z :=z * 2;

        if (z > highest) then 
        begin
          highest :=z;
          ToTerritory :=T;
        end;
      end; 

    if (PNewArmies (PMe) <> 1) then 
    	UBufferSet (1, ToTerritory);
  end;
end;


procedure Attack(var FromTerritory, ToTerritory: integer);
// Make a single attack; attacked country in ToTerritory;
// FromTerritory = 0 to stop, otherwise, attacking country      
var
  T, ET, EA, PT, PA :integer;
  ratio, HValue :double;
begin 
  FromTerritory :=0;
  ToTerritory :=0;
  HValue :=-1000.00;
  
  for T :=1 to 42 do 
    if (TIsFront(T)) and (TArmies(T) > 2) then 
    begin
      TWeakestFront (T, ET, EA); 
      ratio :=double(TArmies(T)) / EA;
      ratio :=ratio * (TArmies(T) - EA);  

      ratio :=ratio - (double(TFrontsCount(T)) * 0.25);

      CAnalysis (TContinent(T), PT, PA, ET, EA);

      if (SConquest) and (EA <> 0) then 
      		ratio :=ratio * (double(PA) / double(EA));

      { I modified the following section to prevent raptorbot from endlessly only attacking one T per turn
         - Nathan Scarbrough Sept 09 #*#
        original code:       if (SConquest) and (PTerritoriesCount(PMe) <= 6) then ratio :=0; }
      if (SConquest) and (PTerritoriesCount(PMe) <= 5) then begin
        if not ( (PA div (EA + 1) >= 3) and (PArmiesCount(PMe) > 30)
        and (PTerritoriesCount(PMe) < 4) and (TArmies(T) >= PArmiesCount(PMe) - PTerritoriesCount(PMe)) ) then
      		ratio :=0;
      end;

      TWeakestFront (T, ET, EA);

      if (ET = 0) and (TFrontsCount(T) > 1) then 
      		ratio :=ratio / 2;

      if SConquest then 
      		ratio :=ratio/3;

      if  ((trunc(UBufferGet(2))) <> TContinent(T)) and (SConquest) then
      		ratio :=ratio/3;  
      if (ratio >= 2) and (ratio > HValue) then
      begin
        ToTerritory :=ET;
        FromTerritory :=T;
      end;
    end;  
end;

procedure Occupation(FromTerritory, ToTerritory: integer; var Armies: integer);
// FromTerritory and ToTerritory are set; Armies contains
// number to move in
var
	armies_in_from: integer;
begin
  armies_in_from:= TArmies(FromTerritory);

  if (PTerritoriesCount(PMe) < 4)  or 
  		(TIsFront(FromTerritory) = false) then 
  			Armies :=armies_in_from - 1 
  else if (TIsFront(ToTerritory) = false) and 
  			(TIsFront(FromTerritory)) then 
  begin
		if armies_in_from >3 then
  				Armies :=3 
		else
				Armies :=1;
  end else
  		Armies :=TArmies(FromTerritory) div 2;
end;

procedure Fortification(var FromTerritory, ToTerritory, Armies: integer);
var
  T,B,MaxArmy, C : integer;
  x, HValue :integer;
begin
  FromTerritory:=0;
  ToTerritory:=0;
  Armies:=0;

  HValue := -1000;

  // look for the greatest nuber of armies which is not on a front territory
  MaxArmy := 1;
  for T:=1 to 42 do 
  begin
    if TIsMine(T) and not TIsFront(T) then 
    begin  // territory is mine and not "front"
      if TArmies(T)>MaxArmy then 
      begin
        MaxArmy := TArmies(T);
        FromTerritory := T;
      end;
    end;
  end;

  // if there are armies to move...
  if (FromTerritory>0) then 
  begin
    // check if can move armies to front...
    for B:=1 to TBordersCount(FromTerritory) do 
    begin
      if ToTerritory=0 then 
      begin
        T:=TBorder(FromTerritory,B);
        if TIsMine(T) and TIsFront(T) then 
          ToTerritory:=T;
      end;
    end;

    // otherwise move armies in the first bordering territory
    if (ToTerritory=0) then 
    begin
      for B:=1 to TBordersCount(FromTerritory) do if (ToTerritory = 0) then 
      begin
        T:=TBorder(FromTerritory,B);
        C :=TContinent (T);
      
        x :=0;

        if TIsMine(T) and (x > HValue) then 
        begin
          HValue :=x;
          ToTerritory:=T;
        end;
      end;
    end;

    // Move all armies to destination (except the one which must stay)
    if ToTerritory>0 then 
      Armies:=TArmies(FromTerritory)-1;

  end;
end;

begin
end.