 // Pitbull.trp  - a computer program for the Turborisk game by Mario Ferrari
 // written by Martin Nehrdich
 //
 //
 //
 // Main objective of this program is to regain lost territories. If a territory is lost,
 // it will attack until it is the owner again or until no army is left.
 // This pitbull-tactic will be stopped, if the territory was not retrieved during
 // this attackturn.
 // This focussed, he's a weak opponent
 // This program uses the UBufferGet and UBufferSet routines quite a lot.
 //
 // Basically this program is just a spinoff of digger.trp.
 //
 // Procedures and comments:
 //
 // ASSIGNMENT:
 // If someone (doesn't matter who) has all territories except one on a continent, 
 // I take the last one, either for my own bonus, or to avoid giving him the bonus.
 // I prefer assigning of territories on small continents, especially if I border other
 // owned territories by me.
 // I also prefer territories on empty continents.
 // This routine just took an hour on the 08th april to program.
 // Actually, I prefer random assignment, but I wanted something programmed, not just the
 // last free territory assigned. (Other way round than simple.trp).
 //
 // PLACEMENT: place armies in the territory with worst ratio own forces/enemy forces bordering
 // with special efforts on territories having only one bordering enemy territory (tripled
 // Ratio if enemy territory is enclosed and force ratio <=2.1, if force ratio >2.1 do not place
 // armies here (force should be big enough), doubled ratio if it's just a one-front territory,
 // but only the strongest territory will be reinforced.
 // If at least half the continent is owned, the Ratio is also increased by 4 * ratio
 // owned/total territories on continent. The Ratio is decreased if there are too many fronts
 // (TPressure gets too big with more fronts, but TStrongestFront is not high enough.)
 // The Ratio is also increased by 3/2 if the territory is bordering a continent owned by me
 // (to defend it better).
 //
 // ATTACK:
 // Quite defensive, perform attack only if forceratio >1.7
 //
 // OCCUPATION:
 // If both territories are 'front' balance armies, except if both territories border the
 // same enemy territory as only front. In this case all armies will be moved (to increase
 // attackpossibility).
 // If only the conquered is front move all armies
 // else do not move armies.
 //
 // FORTIFICATION: look for weakest front and reinforce it, if not possible,
 // move the biggest army on a non-front-territory to any (random) bordering territory.
 //
 // Usage of UBuffer:
 // 01-42 : 1=territory was mine last turn;  0=territory wasn't mine



PROCEDURE Assignment;
VAR
  T, B, BT, C,
  PT, PA,            // Players Territories and Armies
  LP, LT, LA,        // Leader on this continent, his territories and armies
  ET, EA : Integer;  // Enemy Territories and Armies
  Ratio, MaxRatio  : Double;
BEGIN
  // same as digger.trp

  ToTerritory:=0;
  MaxRatio:=0;

  T:=42;
  REPEAT
    IF TOwner(T)=0 THEN
    BEGIN
      C:=TContinent(T);
      CAnalysis(C, PT,PA,ET,EA);
      Ratio:=(PT+1)/(CTerritoriesCount(C)+ET);
      IF ET = 0 THEN Ratio:=Ratio*2;       // IF no enemy on this continent yet, take it.
      FOR B:= 1 TO TBordersCount(T) DO
      BEGIN
        BT:=TBorder(T,B);
        IF TOwner(BT)=PMe THEN Ratio:=Ratio*1.1   // Having myself as neighbour makes less fronts to defend
      END;
      CLeader(C, LP,LT,LA);
      IF (LT=CTerritoriesCount(C)-1) AND (LP>0) THEN Ratio:=Ratio*10+10;  // I want THIS territory, either to avoid the enemy getting the bonus, or to make it my bonus
      IF Ratio>MaxRatio THEN
      BEGIN
        ToTerritory:=T;
        MaxRatio:=Ratio
      END
    END;
    T:=T-1
  UNTIL T<1
END;      // PROCEDURE Assignment



PROCEDURE Placement;
VAR
  T, B, PT, PA, ET, EA, I, Lost     : Integer; //Lost=0 doesn't bother; =1 was mine last turn
  Ratio, MaxRatio, CRatio           : Double;
  BeforeFirstAttackTurn, HaveBorder : Boolean;

  //Function returns false if the territory to attack would become a front of me
  FUNCTION EnemyTerritoryIsEnclosed(TT:Integer):Boolean;
  VAR BT, BTF : Integer;
      ETIE : Boolean;
  BEGIN
    ETIE := TRUE;
    FOR BTF := 1 TO TBordersCount(TT) DO
    BEGIN
      BT := TBorder (TT,BTF);
      IF TOwner(BT)<>PMe THEN ETIE:=False   //Territory would remain a border
    END;
    result:=ETIE
  END; //function EnemyTerritoryIsEnclosed(TT:Integer):Boolean;

BEGIN
  // reinforce territory with greatest ratio between total enemy armies and own armies
  // modified by some factors (on same continent, number of fronts, ...)
  ToTerritory:=0;
  MaxRatio:=0;

  BeforeFirstAttackTurn:=False;
  FOR I:=1 TO 10 DO
    IF PActive(I) AND (I<>PMe) AND (PNewArmies(I)>1) THEN BeforeFirstAttackTurn:=True;
  // I need to defend every territory if BFAT is True. Later I only strengthen certain
  // territories to prevent useless placement of armies.

  // PITBULL
  IF BeforeFirstAttackTurn THEN
   FOR I:=1 TO 42 DO
   BEGIN
     IF TIsMine(I) THEN UBufferSet(I,1)
      ELSE UBufferSet(I,0)
   END;


  T:=42;
  REPEAT
    IF TIsFront(T) THEN         // territory is mine and front
    BEGIN
      Ratio := TPressure(T) / TArmies(T);

      //Increase the pressure if there is only one territory attackable (easy defending)
      IF TFrontsCount(T)=1 THEN
      BEGIN
        ET:=TFront(T,1);
        IF EnemyTerritoryIsEnclosed(ET) THEN
        BEGIN
          IF Ratio > 2.1 THEN Ratio:=0.5      // Forceratio is already big enough to kill this front
           ELSE Ratio:=Ratio*3                // eliminate this front!
        END
         ELSE Ratio:=Ratio*2;

        // Strengthen only the strongest territory bordering this enemyterritory to prevent
        // useless placement of armies which become useless after conquering the territory.
        IF NOT BeforeFirstAttackTurn THEN
         FOR B:=1 TO TBordersCount(ET) DO
          IF TArmies(TBorder(ET,B))>TArmies(T) THEN Ratio:=0.1  //bigger army found, reinforcement of this territory not needed
      END;  //IF TFrontsCount(T)=1

      //too much borders makes TPressure shoot high
      IF TFrontsCount(T)>2 THEN Ratio:=Ratio/(TFrontsCount(T)/2);

      //Defend Territories bordering owned continent
      FOR B:=1 TO TBordersCount(T) DO
      BEGIN
        ET:=TBorder(T,B);
        IF COwner(TContinent(ET))=PMe THEN Ratio:=Ratio*1.5
      END;

      // IF continent is at least half mine, multiply the ratio by the 4 * CRatio owned/total territories on continent
      CAnalysis(TContinent(T),PT,PA,ET,EA);
      CRatio := PT/(PT+ET);
      IF CRatio > 0.5 THEN Ratio := Ratio* 4*CRatio;

      // PITBULL
      FOR I:=1 TO 42 DO
      BEGIN
        Lost:=UBufferGet(I);
        IF TIsMine(I) AND Lost THEN Lost:=False; // still mine
        IF Lost THEN
         IF (TIsBordering(T,I) AND (TPressure(T)/TArmies(T)<2.1)) THEN Ratio:=Ratio*25   // I want my territory back!!! Ratio 2.1 should be enough
      END;

      IF Ratio>MaxRatio THEN
      BEGIN
        ToTerritory:=T;
        MaxRatio:=Ratio
      END
    END;
    T:=T-1
  UNTIL T<1
END;  //PROCEDURE Placement



PROCEDURE Attack;
VAR
  T, B, EnemyT, EnemyA, I : Integer;
  Ratio, MaxRatio : Double;
  Lost : Boolean;

  //Function returns false if the territory to attack would become a front of me
  FUNCTION EnemyTerritoryIsEnclosed(TT:Integer):Boolean;
  VAR BT, BTF : Integer;
      ETIE : Boolean;
  BEGIN
    ETIE := True;
    FOR BTF := 1 TO TBordersCount(TT) DO
    BEGIN
      BT := TBorder (TT,BTF);
      IF TOwner(BT)<>PMe THEN ETIE:=False   //Territory would remain a front
    END;
    result:=ETIE
  END; //function EnemyTerritoryIsEnclosed

  FUNCTION RemainingPitbullTerritory(TT:Integer):Boolean;
  VAR RT, RTB, Dummy : Integer;
      RPT : Boolean;
  BEGIN
    RPT := False;
    FOR RT:= 1 TO 42 DO
    BEGIN
      Dummy := UBufferGet(RT);
      IF Dummy=1 THEN
       IF NOT TIsMine(RT) THEN
        FOR RTB:=1 TO TBordersCount(RT) DO
         IF TIsMine(TBorder(RT,RTB)) THEN
          IF TArmies(TBorder(RT,RTB))>1 THEN RPT:=True
    END;
    result := RPT
  END; //function RemainingPitbullTerritory


BEGIN
  FromTerritory:=0;
  ToTerritory:=0;
  MaxRatio:=0;
  T:=42;
  REPEAT
    IF TIsFront(T) AND (TArmies(T)>1) THEN   // territory is mine, front and attack is possible
    BEGIN
      FOR B:=1 TO TBordersCount(T) DO
      BEGIN
        EnemyT := TBorder(T,B);
        IF NOT TIsMine(EnemyT) THEN
        BEGIN
          Ratio:=(TArmies(T)-1)/TArmies(EnemyT);  // an extra of 1 army needed (the defending one)

          // PITBULL
          Lost:=UBufferGet(EnemyT);
          IF Lost=1 THEN
           Ratio:=Ratio*10+10             // I want my territory back!!!  And MinAttackRatio is disabled
          ELSE
           IF RemainingPitbullTerritory(EnemyT) THEN
            Ratio:=0;                     // other (lost) territories first

          IF EnemyTerritoryIsEnclosed(EnemyT) THEN Ratio:=Ratio*3;       // Do attack if the enemy territory is completely enclosed
          IF Ratio >= 1.7 THEN            // make sure, the force ratio is above MinAttackRatio (except if attacking encircled territory)
          BEGIN
            IF TFrontsCount(T)=1 THEN Ratio:=Ratio*2;     // prefer attacking of territories which do not increase the number of territories to defend (makes ratio*6 if territory is enclosed, it's a must!)
            IF TContinent(T)=TContinent(EnemyT) THEN Ratio:=Ratio*2;     // prefer attacking of territories on same continent
            IF COwner(TContinent(EnemyT))<>0 THEN Ratio:=Ratio*2.1;      // take the army-bonus the enemy gets.
            IF PTerritoriesCount(TOwner(EnemyT))=1 THEN Ratio:=Ratio*2;  // prefer attacking of the last territory the enemy owns (to conquer his cards)
            IF PProgram(TOwner(EnemyT))=PProgram(PMe) THEN Ratio:=Ratio*0.90; // prefer attacking of someone else than a good friend (anyone who has the same program) (but I do still attack them, if not well defended)

            IF Ratio>=MaxRatio THEN                  // if attack is more prefered than last one, do set new attack
            BEGIN
              FromTerritory:=T;
              ToTerritory:=EnemyT;
              MaxRatio:=Ratio
            END   //IF Ratio>=MaxRatio
          END   //IF Ratio>=1.7
        END   //IF NOT TIsMine
      END   //FOR B:=1 TO TBordersCount
    END;  //IF TIsFront
    T:=T-1
  UNTIL T<1;

  // PITBULL        would better be in Fortification without the 'IF ToTerritory=0'
  //                but alas there is this annoying fortification bug.
  IF ToTerritory=0 THEN     // suspend PITBULL-Attacks if territory wasn't re-occupied
   FOR I:=1 TO 42 DO
    IF TIsMine(I) THEN UBufferSet(I, 1)
     ELSE UBufferSet(I, 0);

  IF ToTerritory=0 THEN Armies:=0;

END;  //PROCEDURE Attack



PROCEDURE Occupation;
BEGIN
  // same as digger.trp

  // if both territories are 'front' balance armies, except if both armies border the same
  //  enemy territory as only front. In this case all armies will be moved (to increase attackpossibility).
  // if "To" is front move all armies in the conquered territory except the one which must stay
  // if none of them is front, do not move armies

  Armies:=0;
  IF TIsFront(FromTerritory) AND TIsFront(ToTerritory) THEN
  BEGIN
    IF TArmies(FromTerritory)>TArmies(ToTerritory) THEN
    BEGIN
      IF (TFrontsCount(FromTerritory)=1) AND (TFrontsCount(ToTerritory)=1) THEN
      BEGIN      // It makes a following attack easier if the troops stay together, therefore move all
        IF (TFront(FromTerritory,1)=TFront(ToTerritory,1)) AND ((TArmies(FromTerritory)+2)/(TArmies(TFront(ToTerritory,1)))>1.2) THEN Armies:=TArmies(FromTerritory)-1
      END
      ELSE Armies:=(TArmies(FromTerritory)-TArmies(ToTerritory)) div 2
    END
  END
  ELSE IF TIsFront(ToTerritory) THEN
   Armies:=TArmies(FromTerritory)-1;

  // Until at least version 1.2 of turborisk fortification will NOT be called if  armies <> 0
  // in any occupation (even if only in the first of 5 occupations additional
  // troopmovement was done)
  // Workaround: armies := 0; has the negative side that no effective occupation will be done.
  // At least on my PC (Win95, no Delphi installed), fortification will not be called
END;  //PROCEDURE Occupation




PROCEDURE Fortification;
VAR T, FromT, BiggestArmy, B, MinArmy, MaxArmy  :Integer;
BEGIN
  //Search weakest front and fortify it with the biggest army 
  //standing on a bordering, non-front territory.
  //If there are several weakest fronts,
  //fortify the one with the biggest fortifying army
  //If it is not possible to fortify a front, search the biggest army on a non-front
  //territory and move it to any other bordering territory

  //Up to at least Version 1.2 it is possible, that the fortification-routine
  //will not be called if there was additional troop-movement after conquering
  //a territory (i.e. Ukraine was conquered from Scandinavia and aditional
  //2 troops were moved to make it 5 defendors, (3 are moved initially (if available))).


//  ULog(PName(PMe),': Fortification routine called!');
  MinArmy:=1500;    //smallest frontarmy must be smaller than this one (should be no problem...)
  Armies:=0;        //Do not move armies until moveable army found
  BiggestArmy:=1;   //Need at least 2 Armies to have one to move [TArmies(FromT) > BiggestArmy]
  ToTerritory:=0;
  FromTerritory:=0;
  FromT:=0; //From Territory
  T:=42;
  REPEAT
    IF TIsFront(T) AND (TArmies(T)<=MinArmy) THEN  //TIsFront(T) can only be true if TIsMine(T) is True
    BEGIN
      FOR B:=1 TO TBordersCount(T) DO
      BEGIN
        FromT:=TBorder(T,B);
        IF (TIsMine(FromT) AND (NOT TIsFront(FromT))) AND (TArmies(FromT)>BiggestArmy) THEN
        BEGIN
          MinArmy:=TArmies(T);
          FromTerritory:=FromT;
          ToTerritory:=T;
          Armies:=TArmies(FromTerritory)-1;
          BiggestArmy:=Armies
        END
      END
    END;
    T:=T-1
  UNTIL T<1;

  IF Armies = 0 THEN   //no fortification of a front possible, move the biggest other army anywhere
  BEGIN
    MaxArmy := 1;
    T:=42;
    REPEAT
      IF TIsMine(T) AND NOT TIsFront(T) THEN    // territory is mine and not "front"
      BEGIN
        IF TArmies(T)>MaxArmy THEN
        BEGIN
          MaxArmy := TArmies(T);
          FromTerritory := T
        END
      END;
      T:=T-1
    UNTIL T<1;
    // if there are armies to move...
    // move armies to a random bordering territory
    IF FromTerritory>0 THEN
    BEGIN
      B:=URandom(TBordersCount(FromTerritory))+1;
      ToTerritory:=TBorder(FromTerritory,B);    // Random movement can be very surprising
      Armies:=TArmies(FromTerritory)-1
    END
  END;  //IF Armies = 0

END;  //PROCEDURE Fortification